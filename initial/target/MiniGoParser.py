# Generated from main/minigo/parser/MiniGo.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3C")
        buf.write("\u0410\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\3\2\7\2\u008c\n\2\f\2\16\2\u008f\13\2\3\2\3\2")
        buf.write("\3\2\7\2\u0094\n\2\f\2\16\2\u0097\13\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u00a1\n\3\3\4\3\4\3\4\3\4\5\4\u00a7")
        buf.write("\n\4\3\5\3\5\3\5\5\5\u00ac\n\5\3\5\3\5\5\5\u00b0\n\5\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u00b6\n\6\3\6\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u00c2\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00d5\n")
        buf.write("\7\3\7\5\7\u00d8\n\7\5\7\u00da\n\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7")
        buf.write("\u00fb\n\7\f\7\16\7\u00fe\13\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\7\7\u0107\n\7\f\7\16\7\u010a\13\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\5\7\u0115\n\7\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u011e\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b")
        buf.write("\u0127\n\b\5\b\u0129\n\b\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0131")
        buf.write("\n\t\3\t\3\t\5\t\u0135\n\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n")
        buf.write("\u013d\n\n\3\n\3\n\5\n\u0141\n\n\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u014b\n\13\3\f\3\f\3\r\3\r\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\5\16\u0157\n\16\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\7\17\u015f\n\17\f\17\16\17\u0162\13")
        buf.write("\17\3\17\5\17\u0165\n\17\3\17\3\17\5\17\u0169\n\17\3\17")
        buf.write("\3\17\3\17\5\17\u016e\n\17\3\17\3\17\5\17\u0172\n\17\3")
        buf.write("\17\5\17\u0175\n\17\3\17\3\17\5\17\u0179\n\17\3\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u0180\n\20\3\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u0187\n\21\3\22\3\22\3\22\3\22\3\22\5\22\u018e")
        buf.write("\n\22\3\22\5\22\u0191\n\22\3\22\3\22\3\22\3\23\3\23\5")
        buf.write("\23\u0198\n\23\3\24\3\24\3\24\5\24\u019d\n\24\3\24\3\24")
        buf.write("\3\24\5\24\u01a2\n\24\3\24\3\24\3\24\5\24\u01a7\n\24\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u01b0\n\25\3\25")
        buf.write("\3\25\3\25\5\25\u01b5\n\25\3\25\3\25\3\25\7\25\u01ba\n")
        buf.write("\25\f\25\16\25\u01bd\13\25\3\25\3\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u01c7\n\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\7\27\u01ce\n\27\f\27\16\27\u01d1\13\27\3\27\5\27\u01d4")
        buf.write("\n\27\3\27\7\27\u01d7\n\27\f\27\16\27\u01da\13\27\3\27")
        buf.write("\3\27\5\27\u01de\n\27\3\30\3\30\3\30\5\30\u01e3\n\30\3")
        buf.write("\30\3\30\3\30\5\30\u01e8\n\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u01ee\n\30\3\30\3\30\3\30\5\30\u01f3\n\30\7\30\u01f5")
        buf.write("\n\30\f\30\16\30\u01f8\13\30\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\5\31\u0204\n\31\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\7\32\u020c\n\32\f\32\16\32\u020f\13")
        buf.write("\32\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0217\n\33\f\33")
        buf.write("\16\33\u021a\13\33\3\34\3\34\3\34\3\34\3\34\3\34\7\34")
        buf.write("\u0222\n\34\f\34\16\34\u0225\13\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u022d\n\35\f\35\16\35\u0230\13\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\7\36\u0238\n\36\f\36\16\36\u023b")
        buf.write("\13\36\3\37\3\37\3\37\5\37\u0240\n\37\3 \3 \3 \3 \3 \3")
        buf.write(" \5 \u0248\n \3 \5 \u024b\n \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \7 \u0257\n \f \16 \u025a\13 \3!\3!\3!\3!\3!\3!\3")
        buf.write("!\5!\u0263\n!\3\"\3\"\3\"\3\"\3\"\5\"\u026a\n\"\3\"\3")
        buf.write("\"\5\"\u026e\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u027a")
        buf.write("\n#\3$\3$\3$\3%\3%\3%\3%\3%\5%\u0284\n%\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\5&\u028f\n&\3\'\3\'\3\'\3\'\3\'\3\'\5\'")
        buf.write("\u0297\n\'\3(\3(\3)\3)\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\5+\u02ab\n+\3,\3,\5,\u02af\n,\3-\3-\3-\3-\3")
        buf.write("-\5-\u02b6\n-\3.\3.\5.\u02ba\n.\3/\3/\3/\3/\3/\5/\u02c1")
        buf.write("\n/\3\60\3\60\3\60\5\60\u02c6\n\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\5\60\u02d0\n\60\3\60\3\60\3\60\5")
        buf.write("\60\u02d5\n\60\3\61\3\61\3\61\3\61\5\61\u02db\n\61\3\61")
        buf.write("\3\61\3\61\3\62\3\62\5\62\u02e2\n\62\3\63\3\63\3\63\5")
        buf.write("\63\u02e7\n\63\3\63\3\63\5\63\u02eb\n\63\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\5\64\u02f5\n\64\3\65\3\65\5")
        buf.write("\65\u02f9\n\65\3\66\3\66\3\66\5\66\u02fe\n\66\3\66\3\66")
        buf.write("\5\66\u0302\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\5\67\u030c\n\67\38\38\39\39\39\39\59\u0314\n9\39\3")
        buf.write("9\59\u0318\n9\3:\3:\3:\3:\3:\3;\3;\5;\u0321\n;\3;\3;\3")
        buf.write(";\5;\u0326\n;\7;\u0328\n;\f;\16;\u032b\13;\3;\3;\3;\3")
        buf.write(";\3;\5;\u0332\n;\3;\3;\3;\5;\u0337\n;\3<\3<\3<\3<\3<\3")
        buf.write("<\7<\u033f\n<\f<\16<\u0342\13<\3<\3<\7<\u0346\n<\f<\16")
        buf.write("<\u0349\13<\3<\5<\u034c\n<\3<\7<\u034f\n<\f<\16<\u0352")
        buf.write("\13<\3<\3<\7<\u0356\n<\f<\16<\u0359\13<\3<\7<\u035c\n")
        buf.write("<\f<\16<\u035f\13<\3<\7<\u0362\n<\f<\16<\u0365\13<\3<")
        buf.write("\5<\u0368\n<\3=\3=\3=\3=\3=\3=\3=\7=\u0371\n=\f=\16=\u0374")
        buf.write("\13=\3=\3=\7=\u0378\n=\f=\16=\u037b\13=\3=\5=\u037e\n")
        buf.write("=\3=\7=\u0381\n=\f=\16=\u0384\13=\3=\3=\3>\3>\7>\u038a")
        buf.write("\n>\f>\16>\u038d\13>\3>\3>\7>\u0391\n>\f>\16>\u0394\13")
        buf.write(">\3>\5>\u0397\n>\3>\7>\u039a\n>\f>\16>\u039d\13>\3>\3")
        buf.write(">\3?\3?\3?\7?\u03a4\n?\f?\16?\u03a7\13?\3?\3?\7?\u03ab")
        buf.write("\n?\f?\16?\u03ae\13?\3?\5?\u03b1\n?\3?\3?\7?\u03b5\n?")
        buf.write("\f?\16?\u03b8\13?\3@\3@\3@\3A\3A\3A\3B\3B\3B\3B\3B\3B")
        buf.write("\5B\u03c6\nB\3B\3B\3B\3B\7B\u03cc\nB\fB\16B\u03cf\13B")
        buf.write("\3C\3C\3C\5C\u03d4\nC\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\7D\u03e4\nD\fD\16D\u03e7\13D\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u03f9\nD\5D\u03fb")
        buf.write("\nD\3D\5D\u03fe\nD\5D\u0400\nD\3E\3E\7E\u0404\nE\fE\16")
        buf.write("E\u0407\13E\3E\6E\u040a\nE\rE\16E\u040b\5E\u040e\nE\3")
        buf.write("E\2\b\62\64\668:>F\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\2\r\3\2\27\33\3")
        buf.write("\2\"#\3\2\34!\4\2\13\16\66\66\3\2\13\16\4\2\65\65==\3")
        buf.write("\2\27\30\3\2\31\33\4\2\30\30$$\3\2&+\3\2\27#\2\u0488\2")
        buf.write("\u008d\3\2\2\2\4\u00a0\3\2\2\2\6\u00a6\3\2\2\2\b\u00ab")
        buf.write("\3\2\2\2\n\u00b1\3\2\2\2\f\u0114\3\2\2\2\16\u0128\3\2")
        buf.write("\2\2\20\u0130\3\2\2\2\22\u013c\3\2\2\2\24\u014a\3\2\2")
        buf.write("\2\26\u014c\3\2\2\2\30\u014e\3\2\2\2\32\u0150\3\2\2\2")
        buf.write("\34\u0158\3\2\2\2\36\u017f\3\2\2\2 \u0186\3\2\2\2\"\u0188")
        buf.write("\3\2\2\2$\u0195\3\2\2\2&\u01a6\3\2\2\2(\u01a8\3\2\2\2")
        buf.write("*\u01c6\3\2\2\2,\u01c8\3\2\2\2.\u01df\3\2\2\2\60\u0203")
        buf.write("\3\2\2\2\62\u0205\3\2\2\2\64\u0210\3\2\2\2\66\u021b\3")
        buf.write("\2\2\28\u0226\3\2\2\2:\u0231\3\2\2\2<\u023f\3\2\2\2>\u0241")
        buf.write("\3\2\2\2@\u0262\3\2\2\2B\u0264\3\2\2\2D\u0279\3\2\2\2")
        buf.write("F\u027b\3\2\2\2H\u0283\3\2\2\2J\u028e\3\2\2\2L\u0290\3")
        buf.write("\2\2\2N\u0298\3\2\2\2P\u029a\3\2\2\2R\u029c\3\2\2\2T\u02aa")
        buf.write("\3\2\2\2V\u02ac\3\2\2\2X\u02b5\3\2\2\2Z\u02b7\3\2\2\2")
        buf.write("\\\u02c0\3\2\2\2^\u02d4\3\2\2\2`\u02d6\3\2\2\2b\u02df")
        buf.write("\3\2\2\2d\u02ea\3\2\2\2f\u02f4\3\2\2\2h\u02f6\3\2\2\2")
        buf.write("j\u0301\3\2\2\2l\u030b\3\2\2\2n\u030d\3\2\2\2p\u0313\3")
        buf.write("\2\2\2r\u0319\3\2\2\2t\u0331\3\2\2\2v\u0338\3\2\2\2x\u0369")
        buf.write("\3\2\2\2z\u0387\3\2\2\2|\u03a0\3\2\2\2~\u03b9\3\2\2\2")
        buf.write("\u0080\u03bc\3\2\2\2\u0082\u03c5\3\2\2\2\u0084\u03d0\3")
        buf.write("\2\2\2\u0086\u03ff\3\2\2\2\u0088\u040d\3\2\2\2\u008a\u008c")
        buf.write("\7=\2\2\u008b\u008a\3\2\2\2\u008c\u008f\3\2\2\2\u008d")
        buf.write("\u008b\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0090\3\2\2\2")
        buf.write("\u008f\u008d\3\2\2\2\u0090\u0095\5\4\3\2\u0091\u0094\5")
        buf.write("\4\3\2\u0092\u0094\7=\2\2\u0093\u0091\3\2\2\2\u0093\u0092")
        buf.write("\3\2\2\2\u0094\u0097\3\2\2\2\u0095\u0093\3\2\2\2\u0095")
        buf.write("\u0096\3\2\2\2\u0096\u0098\3\2\2\2\u0097\u0095\3\2\2\2")
        buf.write("\u0098\u0099\7\2\2\3\u0099\3\3\2\2\2\u009a\u00a1\5\b\5")
        buf.write("\2\u009b\u00a1\5\32\16\2\u009c\u00a1\5\6\4\2\u009d\u00a1")
        buf.write("\5(\25\2\u009e\u00a1\5\"\22\2\u009f\u00a1\5,\27\2\u00a0")
        buf.write("\u009a\3\2\2\2\u00a0\u009b\3\2\2\2\u00a0\u009c\3\2\2\2")
        buf.write("\u00a0\u009d\3\2\2\2\u00a0\u009e\3\2\2\2\u00a0\u009f\3")
        buf.write("\2\2\2\u00a1\5\3\2\2\2\u00a2\u00a7\5\34\17\2\u00a3\u00a4")
        buf.write("\5\b\5\2\u00a4\u00a5\5\u0088E\2\u00a5\u00a7\3\2\2\2\u00a6")
        buf.write("\u00a2\3\2\2\2\u00a6\u00a3\3\2\2\2\u00a7\7\3\2\2\2\u00a8")
        buf.write("\u00ac\5\n\6\2\u00a9\u00ac\5\16\b\2\u00aa\u00ac\5\f\7")
        buf.write("\2\u00ab\u00a8\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00aa")
        buf.write("\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00af\7\65\2\2\u00ae")
        buf.write("\u00b0\5\u0088E\2\u00af\u00ae\3\2\2\2\u00af\u00b0\3\2")
        buf.write("\2\2\u00b0\t\3\2\2\2\u00b1\u00b2\7\20\2\2\u00b2\u00b5")
        buf.write("\7\66\2\2\u00b3\u00b6\5\30\r\2\u00b4\u00b6\5B\"\2\u00b5")
        buf.write("\u00b3\3\2\2\2\u00b5\u00b4\3\2\2\2\u00b5\u00b6\3\2\2\2")
        buf.write("\u00b6\u00b7\3\2\2\2\u00b7\u00b8\7%\2\2\u00b8\u00b9\5")
        buf.write("\62\32\2\u00b9\13\3\2\2\2\u00ba\u00bb\7\20\2\2\u00bb\u00bc")
        buf.write("\7\66\2\2\u00bc\u00c1\7\66\2\2\u00bd\u00be\7%\2\2\u00be")
        buf.write("\u00bf\5L\'\2\u00bf\u00c0\5N(\2\u00c0\u00c2\3\2\2\2\u00c1")
        buf.write("\u00bd\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\u0115\3\2\2\2")
        buf.write("\u00c3\u00c4\7\20\2\2\u00c4\u00c5\7\66\2\2\u00c5\u00c6")
        buf.write("\7\66\2\2\u00c6\u00c7\7%\2\2\u00c7\u00c8\5L\'\2\u00c8")
        buf.write("\u00c9\5N(\2\u00c9\u00ca\7\62\2\2\u00ca\u00cb\5H%\2\u00cb")
        buf.write("\u00cc\7\63\2\2\u00cc\u0115\3\2\2\2\u00cd\u00ce\7\20\2")
        buf.write("\2\u00ce\u00cf\7\66\2\2\u00cf\u00d9\7\66\2\2\u00d0\u00d1")
        buf.write("\7%\2\2\u00d1\u00d7\7\66\2\2\u00d2\u00d4\7\62\2\2\u00d3")
        buf.write("\u00d5\5T+\2\u00d4\u00d3\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write("\u00d6\3\2\2\2\u00d6\u00d8\7\63\2\2\u00d7\u00d2\3\2\2")
        buf.write("\2\u00d7\u00d8\3\2\2\2\u00d8\u00da\3\2\2\2\u00d9\u00d0")
        buf.write("\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u0115\3\2\2\2\u00db")
        buf.write("\u00dc\7\20\2\2\u00dc\u00dd\7\66\2\2\u00dd\u00de\7\66")
        buf.write("\2\2\u00de\u00df\7%\2\2\u00df\u00e0\5\62\32\2\u00e0\u00e1")
        buf.write("\t\2\2\2\u00e1\u00e2\5\62\32\2\u00e2\u0115\3\2\2\2\u00e3")
        buf.write("\u00e4\7\20\2\2\u00e4\u00e5\7\66\2\2\u00e5\u00e6\7\66")
        buf.write("\2\2\u00e6\u00e7\7%\2\2\u00e7\u00e8\5\62\32\2\u00e8\u00e9")
        buf.write("\t\3\2\2\u00e9\u00ea\5\62\32\2\u00ea\u0115\3\2\2\2\u00eb")
        buf.write("\u00ec\7\20\2\2\u00ec\u00ed\7\66\2\2\u00ed\u00ee\7\66")
        buf.write("\2\2\u00ee\u00ef\7%\2\2\u00ef\u00f0\5\62\32\2\u00f0\u00f1")
        buf.write("\t\4\2\2\u00f1\u00f2\5\62\32\2\u00f2\u0115\3\2\2\2\u00f3")
        buf.write("\u00f4\7\20\2\2\u00f4\u00f5\7\66\2\2\u00f5\u00f6\7\66")
        buf.write("\2\2\u00f6\u00f7\7%\2\2\u00f7\u00fc\7\66\2\2\u00f8\u00f9")
        buf.write("\7,\2\2\u00f9\u00fb\7\66\2\2\u00fa\u00f8\3\2\2\2\u00fb")
        buf.write("\u00fe\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2")
        buf.write("\u00fd\u0115\3\2\2\2\u00fe\u00fc\3\2\2\2\u00ff\u0100\7")
        buf.write("\20\2\2\u0100\u0101\7\66\2\2\u0101\u0102\7\66\2\2\u0102")
        buf.write("\u0103\7%\2\2\u0103\u0108\5\62\32\2\u0104\u0105\7,\2\2")
        buf.write("\u0105\u0107\5\62\32\2\u0106\u0104\3\2\2\2\u0107\u010a")
        buf.write("\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109")
        buf.write("\u0115\3\2\2\2\u010a\u0108\3\2\2\2\u010b\u010c\7\20\2")
        buf.write("\2\u010c\u010d\7\66\2\2\u010d\u010e\7\66\2\2\u010e\u010f")
        buf.write("\7%\2\2\u010f\u0110\5\62\32\2\u0110\u0111\7\60\2\2\u0111")
        buf.write("\u0112\5\62\32\2\u0112\u0113\7\61\2\2\u0113\u0115\3\2")
        buf.write("\2\2\u0114\u00ba\3\2\2\2\u0114\u00c3\3\2\2\2\u0114\u00cd")
        buf.write("\3\2\2\2\u0114\u00db\3\2\2\2\u0114\u00e3\3\2\2\2\u0114")
        buf.write("\u00eb\3\2\2\2\u0114\u00f3\3\2\2\2\u0114\u00ff\3\2\2\2")
        buf.write("\u0114\u010b\3\2\2\2\u0115\r\3\2\2\2\u0116\u0117\7\20")
        buf.write("\2\2\u0117\u0118\7\66\2\2\u0118\u011d\5\30\r\2\u0119\u011a")
        buf.write("\7%\2\2\u011a\u011e\5\62\32\2\u011b\u011c\7%\2\2\u011c")
        buf.write("\u011e\5B\"\2\u011d\u0119\3\2\2\2\u011d\u011b\3\2\2\2")
        buf.write("\u011d\u011e\3\2\2\2\u011e\u0129\3\2\2\2\u011f\u0120\7")
        buf.write("\20\2\2\u0120\u0121\7\66\2\2\u0121\u0126\5B\"\2\u0122")
        buf.write("\u0123\7%\2\2\u0123\u0127\5\62\32\2\u0124\u0125\7%\2\2")
        buf.write("\u0125\u0127\5B\"\2\u0126\u0122\3\2\2\2\u0126\u0124\3")
        buf.write("\2\2\2\u0126\u0127\3\2\2\2\u0127\u0129\3\2\2\2\u0128\u0116")
        buf.write("\3\2\2\2\u0128\u011f\3\2\2\2\u0129\17\3\2\2\2\u012a\u0131")
        buf.write("\7\66\2\2\u012b\u012c\7\66\2\2\u012c\u012d\7.\2\2\u012d")
        buf.write("\u012e\5\24\13\2\u012e\u012f\7/\2\2\u012f\u0131\3\2\2")
        buf.write("\2\u0130\u012a\3\2\2\2\u0130\u012b\3\2\2\2\u0131\u0134")
        buf.write("\3\2\2\2\u0132\u0135\5\26\f\2\u0133\u0135\5B\"\2\u0134")
        buf.write("\u0132\3\2\2\2\u0134\u0133\3\2\2\2\u0134\u0135\3\2\2\2")
        buf.write("\u0135\21\3\2\2\2\u0136\u013d\7\66\2\2\u0137\u0138\7\66")
        buf.write("\2\2\u0138\u0139\7.\2\2\u0139\u013a\5\24\13\2\u013a\u013b")
        buf.write("\7/\2\2\u013b\u013d\3\2\2\2\u013c\u0136\3\2\2\2\u013c")
        buf.write("\u0137\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u0141\5\26\f")
        buf.write("\2\u013f\u0141\5B\"\2\u0140\u013e\3\2\2\2\u0140\u013f")
        buf.write("\3\2\2\2\u0141\23\3\2\2\2\u0142\u014b\7\67\2\2\u0143\u0144")
        buf.write("\7\67\2\2\u0144\u0145\7\64\2\2\u0145\u014b\5\24\13\2\u0146")
        buf.write("\u014b\78\2\2\u0147\u0148\78\2\2\u0148\u0149\7\64\2\2")
        buf.write("\u0149\u014b\5\24\13\2\u014a\u0142\3\2\2\2\u014a\u0143")
        buf.write("\3\2\2\2\u014a\u0146\3\2\2\2\u014a\u0147\3\2\2\2\u014b")
        buf.write("\25\3\2\2\2\u014c\u014d\t\5\2\2\u014d\27\3\2\2\2\u014e")
        buf.write("\u014f\t\6\2\2\u014f\31\3\2\2\2\u0150\u0151\7\17\2\2\u0151")
        buf.write("\u0152\7\66\2\2\u0152\u0153\7%\2\2\u0153\u0154\5\62\32")
        buf.write("\2\u0154\u0156\t\7\2\2\u0155\u0157\5\u0088E\2\u0156\u0155")
        buf.write("\3\2\2\2\u0156\u0157\3\2\2\2\u0157\33\3\2\2\2\u0158\u0159")
        buf.write("\7\7\2\2\u0159\u015a\7\66\2\2\u015a\u0164\7.\2\2\u015b")
        buf.write("\u0160\7\66\2\2\u015c\u015d\7\64\2\2\u015d\u015f\7\66")
        buf.write("\2\2\u015e\u015c\3\2\2\2\u015f\u0162\3\2\2\2\u0160\u015e")
        buf.write("\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0163\3\2\2\2\u0162")
        buf.write("\u0160\3\2\2\2\u0163\u0165\5\26\f\2\u0164\u015b\3\2\2")
        buf.write("\2\u0164\u0165\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0167")
        buf.write("\7\64\2\2\u0167\u0169\5\36\20\2\u0168\u0166\3\2\2\2\u0168")
        buf.write("\u0169\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016d\7/\2\2")
        buf.write("\u016b\u016e\5\26\f\2\u016c\u016e\5B\"\2\u016d\u016b\3")
        buf.write("\2\2\2\u016d\u016c\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u016f")
        buf.write("\3\2\2\2\u016f\u0171\7\62\2\2\u0170\u0172\5\u0088E\2\u0171")
        buf.write("\u0170\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0174\3\2\2\2")
        buf.write("\u0173\u0175\5h\65\2\u0174\u0173\3\2\2\2\u0174\u0175\3")
        buf.write("\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\7\63\2\2\u0177")
        buf.write("\u0179\5\u0088E\2\u0178\u0177\3\2\2\2\u0178\u0179\3\2")
        buf.write("\2\2\u0179\35\3\2\2\2\u017a\u0180\5\20\t\2\u017b\u017c")
        buf.write("\5\20\t\2\u017c\u017d\7\64\2\2\u017d\u017e\5\36\20\2\u017e")
        buf.write("\u0180\3\2\2\2\u017f\u017a\3\2\2\2\u017f\u017b\3\2\2\2")
        buf.write("\u0180\37\3\2\2\2\u0181\u0187\5\22\n\2\u0182\u0183\5\22")
        buf.write("\n\2\u0183\u0184\7\64\2\2\u0184\u0185\5 \21\2\u0185\u0187")
        buf.write("\3\2\2\2\u0186\u0181\3\2\2\2\u0186\u0182\3\2\2\2\u0187")
        buf.write("!\3\2\2\2\u0188\u0189\7\b\2\2\u0189\u018a\7\66\2\2\u018a")
        buf.write("\u018b\7\t\2\2\u018b\u018d\7\62\2\2\u018c\u018e\5\u0088")
        buf.write("E\2\u018d\u018c\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u0190")
        buf.write("\3\2\2\2\u018f\u0191\5$\23\2\u0190\u018f\3\2\2\2\u0190")
        buf.write("\u0191\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0193\7\63\2")
        buf.write("\2\u0193\u0194\5\u0088E\2\u0194#\3\2\2\2\u0195\u0197\5")
        buf.write("&\24\2\u0196\u0198\5\u0088E\2\u0197\u0196\3\2\2\2\u0197")
        buf.write("\u0198\3\2\2\2\u0198%\3\2\2\2\u0199\u019c\7\66\2\2\u019a")
        buf.write("\u019d\5\26\f\2\u019b\u019d\5B\"\2\u019c\u019a\3\2\2\2")
        buf.write("\u019c\u019b\3\2\2\2\u019d\u01a7\3\2\2\2\u019e\u01a1\7")
        buf.write("\66\2\2\u019f\u01a2\5\26\f\2\u01a0\u01a2\5B\"\2\u01a1")
        buf.write("\u019f\3\2\2\2\u01a1\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2")
        buf.write("\u01a3\u01a4\5\u0088E\2\u01a4\u01a5\5&\24\2\u01a5\u01a7")
        buf.write("\3\2\2\2\u01a6\u0199\3\2\2\2\u01a6\u019e\3\2\2\2\u01a7")
        buf.write("\'\3\2\2\2\u01a8\u01a9\7\7\2\2\u01a9\u01aa\7.\2\2\u01aa")
        buf.write("\u01ab\5*\26\2\u01ab\u01ac\7/\2\2\u01ac\u01ad\7\66\2\2")
        buf.write("\u01ad\u01af\7.\2\2\u01ae\u01b0\5 \21\2\u01af\u01ae\3")
        buf.write("\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b4")
        buf.write("\7/\2\2\u01b2\u01b5\5\26\f\2\u01b3\u01b5\5B\"\2\u01b4")
        buf.write("\u01b2\3\2\2\2\u01b4\u01b3\3\2\2\2\u01b4\u01b5\3\2\2\2")
        buf.write("\u01b5\u01b6\3\2\2\2\u01b6\u01bb\7\62\2\2\u01b7\u01ba")
        buf.write("\5b\62\2\u01b8\u01ba\5Z.\2\u01b9\u01b7\3\2\2\2\u01b9\u01b8")
        buf.write("\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb")
        buf.write("\u01bc\3\2\2\2\u01bc\u01be\3\2\2\2\u01bd\u01bb\3\2\2\2")
        buf.write("\u01be\u01bf\7\63\2\2\u01bf)\3\2\2\2\u01c0\u01c1\7\66")
        buf.write("\2\2\u01c1\u01c7\7\66\2\2\u01c2\u01c3\7\66\2\2\u01c3\u01c4")
        buf.write("\7\66\2\2\u01c4\u01c5\7\64\2\2\u01c5\u01c7\5*\26\2\u01c6")
        buf.write("\u01c0\3\2\2\2\u01c6\u01c2\3\2\2\2\u01c7+\3\2\2\2\u01c8")
        buf.write("\u01c9\7\b\2\2\u01c9\u01ca\7\66\2\2\u01ca\u01cb\7\n\2")
        buf.write("\2\u01cb\u01cf\7\62\2\2\u01cc\u01ce\5\u0088E\2\u01cd\u01cc")
        buf.write("\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf")
        buf.write("\u01d0\3\2\2\2\u01d0\u01d3\3\2\2\2\u01d1\u01cf\3\2\2\2")
        buf.write("\u01d2\u01d4\5.\30\2\u01d3\u01d2\3\2\2\2\u01d3\u01d4\3")
        buf.write("\2\2\2\u01d4\u01d8\3\2\2\2\u01d5\u01d7\5\u0088E\2\u01d6")
        buf.write("\u01d5\3\2\2\2\u01d7\u01da\3\2\2\2\u01d8\u01d6\3\2\2\2")
        buf.write("\u01d8\u01d9\3\2\2\2\u01d9\u01db\3\2\2\2\u01da\u01d8\3")
        buf.write("\2\2\2\u01db\u01dd\7\63\2\2\u01dc\u01de\5\u0088E\2\u01dd")
        buf.write("\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de-\3\2\2\2\u01df")
        buf.write("\u01e0\7\66\2\2\u01e0\u01e2\7.\2\2\u01e1\u01e3\5\36\20")
        buf.write("\2\u01e2\u01e1\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4")
        buf.write("\3\2\2\2\u01e4\u01e7\7/\2\2\u01e5\u01e8\5\26\f\2\u01e6")
        buf.write("\u01e8\5B\"\2\u01e7\u01e5\3\2\2\2\u01e7\u01e6\3\2\2\2")
        buf.write("\u01e7\u01e8\3\2\2\2\u01e8\u01f6\3\2\2\2\u01e9\u01ea\5")
        buf.write("\u0088E\2\u01ea\u01eb\7\66\2\2\u01eb\u01ed\7.\2\2\u01ec")
        buf.write("\u01ee\5\36\20\2\u01ed\u01ec\3\2\2\2\u01ed\u01ee\3\2\2")
        buf.write("\2\u01ee\u01ef\3\2\2\2\u01ef\u01f2\7/\2\2\u01f0\u01f3")
        buf.write("\5\26\f\2\u01f1\u01f3\5B\"\2\u01f2\u01f0\3\2\2\2\u01f2")
        buf.write("\u01f1\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f5\3\2\2\2")
        buf.write("\u01f4\u01e9\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3")
        buf.write("\2\2\2\u01f6\u01f7\3\2\2\2\u01f7/\3\2\2\2\u01f8\u01f6")
        buf.write("\3\2\2\2\u01f9\u0204\7\67\2\2\u01fa\u0204\79\2\2\u01fb")
        buf.write("\u0204\7:\2\2\u01fc\u0204\7;\2\2\u01fd\u0204\78\2\2\u01fe")
        buf.write("\u0204\7<\2\2\u01ff\u0204\7\25\2\2\u0200\u0204\7\26\2")
        buf.write("\2\u0201\u0204\5B\"\2\u0202\u0204\5R*\2\u0203\u01f9\3")
        buf.write("\2\2\2\u0203\u01fa\3\2\2\2\u0203\u01fb\3\2\2\2\u0203\u01fc")
        buf.write("\3\2\2\2\u0203\u01fd\3\2\2\2\u0203\u01fe\3\2\2\2\u0203")
        buf.write("\u01ff\3\2\2\2\u0203\u0200\3\2\2\2\u0203\u0201\3\2\2\2")
        buf.write("\u0203\u0202\3\2\2\2\u0204\61\3\2\2\2\u0205\u0206\b\32")
        buf.write("\1\2\u0206\u0207\5\64\33\2\u0207\u020d\3\2\2\2\u0208\u0209")
        buf.write("\f\4\2\2\u0209\u020a\7#\2\2\u020a\u020c\5\64\33\2\u020b")
        buf.write("\u0208\3\2\2\2\u020c\u020f\3\2\2\2\u020d\u020b\3\2\2\2")
        buf.write("\u020d\u020e\3\2\2\2\u020e\63\3\2\2\2\u020f\u020d\3\2")
        buf.write("\2\2\u0210\u0211\b\33\1\2\u0211\u0212\5\66\34\2\u0212")
        buf.write("\u0218\3\2\2\2\u0213\u0214\f\4\2\2\u0214\u0215\7\"\2\2")
        buf.write("\u0215\u0217\5\66\34\2\u0216\u0213\3\2\2\2\u0217\u021a")
        buf.write("\3\2\2\2\u0218\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219")
        buf.write("\65\3\2\2\2\u021a\u0218\3\2\2\2\u021b\u021c\b\34\1\2\u021c")
        buf.write("\u021d\58\35\2\u021d\u0223\3\2\2\2\u021e\u021f\f\4\2\2")
        buf.write("\u021f\u0220\t\4\2\2\u0220\u0222\58\35\2\u0221\u021e\3")
        buf.write("\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224")
        buf.write("\3\2\2\2\u0224\67\3\2\2\2\u0225\u0223\3\2\2\2\u0226\u0227")
        buf.write("\b\35\1\2\u0227\u0228\5:\36\2\u0228\u022e\3\2\2\2\u0229")
        buf.write("\u022a\f\4\2\2\u022a\u022b\t\b\2\2\u022b\u022d\5:\36\2")
        buf.write("\u022c\u0229\3\2\2\2\u022d\u0230\3\2\2\2\u022e\u022c\3")
        buf.write("\2\2\2\u022e\u022f\3\2\2\2\u022f9\3\2\2\2\u0230\u022e")
        buf.write("\3\2\2\2\u0231\u0232\b\36\1\2\u0232\u0233\5<\37\2\u0233")
        buf.write("\u0239\3\2\2\2\u0234\u0235\f\4\2\2\u0235\u0236\t\t\2\2")
        buf.write("\u0236\u0238\5<\37\2\u0237\u0234\3\2\2\2\u0238\u023b\3")
        buf.write("\2\2\2\u0239\u0237\3\2\2\2\u0239\u023a\3\2\2\2\u023a;")
        buf.write("\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u023d\t\n\2\2\u023d")
        buf.write("\u0240\5<\37\2\u023e\u0240\5> \2\u023f\u023c\3\2\2\2\u023f")
        buf.write("\u023e\3\2\2\2\u0240=\3\2\2\2\u0241\u0242\b \1\2\u0242")
        buf.write("\u0243\5@!\2\u0243\u0258\3\2\2\2\u0244\u024a\f\6\2\2\u0245")
        buf.write("\u0247\7.\2\2\u0246\u0248\5X-\2\u0247\u0246\3\2\2\2\u0247")
        buf.write("\u0248\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024b\7/\2\2")
        buf.write("\u024a\u0245\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024c\3")
        buf.write("\2\2\2\u024c\u0257\5L\'\2\u024d\u024e\f\5\2\2\u024e\u024f")
        buf.write("\5L\'\2\u024f\u0250\7\60\2\2\u0250\u0251\5\62\32\2\u0251")
        buf.write("\u0252\7\61\2\2\u0252\u0257\3\2\2\2\u0253\u0254\f\4\2")
        buf.write("\2\u0254\u0255\7,\2\2\u0255\u0257\5@!\2\u0256\u0244\3")
        buf.write("\2\2\2\u0256\u024d\3\2\2\2\u0256\u0253\3\2\2\2\u0257\u025a")
        buf.write("\3\2\2\2\u0258\u0256\3\2\2\2\u0258\u0259\3\2\2\2\u0259")
        buf.write("?\3\2\2\2\u025a\u0258\3\2\2\2\u025b\u0263\5\60\31\2\u025c")
        buf.write("\u0263\7\66\2\2\u025d\u025e\7.\2\2\u025e\u025f\5\62\32")
        buf.write("\2\u025f\u0260\7/\2\2\u0260\u0263\3\2\2\2\u0261\u0263")
        buf.write("\5\u0082B\2\u0262\u025b\3\2\2\2\u0262\u025c\3\2\2\2\u0262")
        buf.write("\u025d\3\2\2\2\u0262\u0261\3\2\2\2\u0263A\3\2\2\2\u0264")
        buf.write("\u0265\5L\'\2\u0265\u026d\5N(\2\u0266\u0269\7\62\2\2\u0267")
        buf.write("\u026a\5H%\2\u0268\u026a\5D#\2\u0269\u0267\3\2\2\2\u0269")
        buf.write("\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c\7\63\2")
        buf.write("\2\u026c\u026e\3\2\2\2\u026d\u0266\3\2\2\2\u026d\u026e")
        buf.write("\3\2\2\2\u026eC\3\2\2\2\u026f\u0270\7\62\2\2\u0270\u0271")
        buf.write("\5H%\2\u0271\u0272\7\63\2\2\u0272\u027a\3\2\2\2\u0273")
        buf.write("\u0274\7\62\2\2\u0274\u0275\5H%\2\u0275\u0276\7\63\2\2")
        buf.write("\u0276\u0277\7\64\2\2\u0277\u0278\5D#\2\u0278\u027a\3")
        buf.write("\2\2\2\u0279\u026f\3\2\2\2\u0279\u0273\3\2\2\2\u027aE")
        buf.write("\3\2\2\2\u027b\u027c\5L\'\2\u027c\u027d\5N(\2\u027dG\3")
        buf.write("\2\2\2\u027e\u0284\5J&\2\u027f\u0280\5J&\2\u0280\u0281")
        buf.write("\7\64\2\2\u0281\u0282\5H%\2\u0282\u0284\3\2\2\2\u0283")
        buf.write("\u027e\3\2\2\2\u0283\u027f\3\2\2\2\u0284I\3\2\2\2\u0285")
        buf.write("\u028f\7\67\2\2\u0286\u028f\79\2\2\u0287\u028f\7:\2\2")
        buf.write("\u0288\u028f\7;\2\2\u0289\u028f\78\2\2\u028a\u028f\7<")
        buf.write("\2\2\u028b\u028f\7\25\2\2\u028c\u028f\7\26\2\2\u028d\u028f")
        buf.write("\5R*\2\u028e\u0285\3\2\2\2\u028e\u0286\3\2\2\2\u028e\u0287")
        buf.write("\3\2\2\2\u028e\u0288\3\2\2\2\u028e\u0289\3\2\2\2\u028e")
        buf.write("\u028a\3\2\2\2\u028e\u028b\3\2\2\2\u028e\u028c\3\2\2\2")
        buf.write("\u028e\u028d\3\2\2\2\u028fK\3\2\2\2\u0290\u0291\7\60\2")
        buf.write("\2\u0291\u0292\7\67\2\2\u0292\u0296\7\61\2\2\u0293\u0294")
        buf.write("\7\60\2\2\u0294\u0295\7\67\2\2\u0295\u0297\7\61\2\2\u0296")
        buf.write("\u0293\3\2\2\2\u0296\u0297\3\2\2\2\u0297M\3\2\2\2\u0298")
        buf.write("\u0299\t\5\2\2\u0299O\3\2\2\2\u029a\u029b\t\6\2\2\u029b")
        buf.write("Q\3\2\2\2\u029c\u029d\7\66\2\2\u029d\u029e\7\62\2\2\u029e")
        buf.write("\u029f\5T+\2\u029f\u02a0\7\63\2\2\u02a0S\3\2\2\2\u02a1")
        buf.write("\u02a2\7\66\2\2\u02a2\u02a3\7-\2\2\u02a3\u02ab\5\62\32")
        buf.write("\2\u02a4\u02a5\7\66\2\2\u02a5\u02a6\7-\2\2\u02a6\u02a7")
        buf.write("\5\62\32\2\u02a7\u02a8\7\64\2\2\u02a8\u02a9\5T+\2\u02a9")
        buf.write("\u02ab\3\2\2\2\u02aa\u02a1\3\2\2\2\u02aa\u02a4\3\2\2\2")
        buf.write("\u02abU\3\2\2\2\u02ac\u02ae\5X-\2\u02ad\u02af\5\u0088")
        buf.write("E\2\u02ae\u02ad\3\2\2\2\u02ae\u02af\3\2\2\2\u02afW\3\2")
        buf.write("\2\2\u02b0\u02b6\5\62\32\2\u02b1\u02b2\5\62\32\2\u02b2")
        buf.write("\u02b3\7\64\2\2\u02b3\u02b4\5X-\2\u02b4\u02b6\3\2\2\2")
        buf.write("\u02b5\u02b0\3\2\2\2\u02b5\u02b1\3\2\2\2\u02b6Y\3\2\2")
        buf.write("\2\u02b7\u02b9\5\\/\2\u02b8\u02ba\5\u0088E\2\u02b9\u02b8")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba[\3\2\2\2\u02bb\u02c1")
        buf.write("\5\62\32\2\u02bc\u02bd\5\62\32\2\u02bd\u02be\5\u0088E")
        buf.write("\2\u02be\u02bf\5X-\2\u02bf\u02c1\3\2\2\2\u02c0\u02bb\3")
        buf.write("\2\2\2\u02c0\u02bc\3\2\2\2\u02c1]\3\2\2\2\u02c2\u02d5")
        buf.write("\5\62\32\2\u02c3\u02c6\5`\61\2\u02c4\u02c6\5t;\2\u02c5")
        buf.write("\u02c3\3\2\2\2\u02c5\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2")
        buf.write("\u02c7\u02c8\7\65\2\2\u02c8\u02c9\5\62\32\2\u02c9\u02ca")
        buf.write("\7\65\2\2\u02ca\u02cb\5t;\2\u02cb\u02d5\3\2\2\2\u02cc")
        buf.write("\u02cf\7\66\2\2\u02cd\u02ce\7\64\2\2\u02ce\u02d0\7\66")
        buf.write("\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1")
        buf.write("\3\2\2\2\u02d1\u02d2\7&\2\2\u02d2\u02d3\7\23\2\2\u02d3")
        buf.write("\u02d5\5\62\32\2\u02d4\u02c2\3\2\2\2\u02d4\u02c5\3\2\2")
        buf.write("\2\u02d4\u02cc\3\2\2\2\u02d5_\3\2\2\2\u02d6\u02d7\7\20")
        buf.write("\2\2\u02d7\u02da\7\66\2\2\u02d8\u02db\5\30\r\2\u02d9\u02db")
        buf.write("\5B\"\2\u02da\u02d8\3\2\2\2\u02da\u02d9\3\2\2\2\u02da")
        buf.write("\u02db\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\7%\2\2")
        buf.write("\u02dd\u02de\5\62\32\2\u02dea\3\2\2\2\u02df\u02e1\5d\63")
        buf.write("\2\u02e0\u02e2\5\u0088E\2\u02e1\u02e0\3\2\2\2\u02e1\u02e2")
        buf.write("\3\2\2\2\u02e2c\3\2\2\2\u02e3\u02eb\5f\64\2\u02e4\u02e6")
        buf.write("\5f\64\2\u02e5\u02e7\5\u0088E\2\u02e6\u02e5\3\2\2\2\u02e6")
        buf.write("\u02e7\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\5d\63\2")
        buf.write("\u02e9\u02eb\3\2\2\2\u02ea\u02e3\3\2\2\2\u02ea\u02e4\3")
        buf.write("\2\2\2\u02ebe\3\2\2\2\u02ec\u02f5\5n8\2\u02ed\u02f5\5")
        buf.write("t;\2\u02ee\u02f5\5v<\2\u02ef\u02f5\5|?\2\u02f0\u02f5\5")
        buf.write("~@\2\u02f1\u02f5\5\u0080A\2\u02f2\u02f5\5\u0082B\2\u02f3")
        buf.write("\u02f5\5\u0086D\2\u02f4\u02ec\3\2\2\2\u02f4\u02ed\3\2")
        buf.write("\2\2\u02f4\u02ee\3\2\2\2\u02f4\u02ef\3\2\2\2\u02f4\u02f0")
        buf.write("\3\2\2\2\u02f4\u02f1\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4")
        buf.write("\u02f3\3\2\2\2\u02f5g\3\2\2\2\u02f6\u02f8\5j\66\2\u02f7")
        buf.write("\u02f9\5\u0088E\2\u02f8\u02f7\3\2\2\2\u02f8\u02f9\3\2")
        buf.write("\2\2\u02f9i\3\2\2\2\u02fa\u0302\5l\67\2\u02fb\u02fd\5")
        buf.write("l\67\2\u02fc\u02fe\5\u0088E\2\u02fd\u02fc\3\2\2\2\u02fd")
        buf.write("\u02fe\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0300\5j\66\2")
        buf.write("\u0300\u0302\3\2\2\2\u0301\u02fa\3\2\2\2\u0301\u02fb\3")
        buf.write("\2\2\2\u0302k\3\2\2\2\u0303\u030c\5p9\2\u0304\u030c\5")
        buf.write("t;\2\u0305\u030c\5v<\2\u0306\u030c\5|?\2\u0307\u030c\5")
        buf.write("~@\2\u0308\u030c\5\u0080A\2\u0309\u030c\5\u0082B\2\u030a")
        buf.write("\u030c\5\u0086D\2\u030b\u0303\3\2\2\2\u030b\u0304\3\2")
        buf.write("\2\2\u030b\u0305\3\2\2\2\u030b\u0306\3\2\2\2\u030b\u0307")
        buf.write("\3\2\2\2\u030b\u0308\3\2\2\2\u030b\u0309\3\2\2\2\u030b")
        buf.write("\u030a\3\2\2\2\u030cm\3\2\2\2\u030d\u030e\5\b\5\2\u030e")
        buf.write("o\3\2\2\2\u030f\u0314\5r:\2\u0310\u0314\5\n\6\2\u0311")
        buf.write("\u0314\5\16\b\2\u0312\u0314\5\f\7\2\u0313\u030f\3\2\2")
        buf.write("\2\u0313\u0310\3\2\2\2\u0313\u0311\3\2\2\2\u0313\u0312")
        buf.write("\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0317\t\7\2\2\u0316")
        buf.write("\u0318\5\u0088E\2\u0317\u0316\3\2\2\2\u0317\u0318\3\2")
        buf.write("\2\2\u0318q\3\2\2\2\u0319\u031a\7\17\2\2\u031a\u031b\7")
        buf.write("\66\2\2\u031b\u031c\7%\2\2\u031c\u031d\5\62\32\2\u031d")
        buf.write("s\3\2\2\2\u031e\u0320\7\66\2\2\u031f\u0321\5L\'\2\u0320")
        buf.write("\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0329\3\2\2\2")
        buf.write("\u0322\u0323\7,\2\2\u0323\u0325\7\66\2\2\u0324\u0326\5")
        buf.write("L\'\2\u0325\u0324\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0328")
        buf.write("\3\2\2\2\u0327\u0322\3\2\2\2\u0328\u032b\3\2\2\2\u0329")
        buf.write("\u0327\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u0332\3\2\2\2")
        buf.write("\u032b\u0329\3\2\2\2\u032c\u032d\7\66\2\2\u032d\u032e")
        buf.write("\7\60\2\2\u032e\u032f\5V,\2\u032f\u0330\7\61\2\2\u0330")
        buf.write("\u0332\3\2\2\2\u0331\u031e\3\2\2\2\u0331\u032c\3\2\2\2")
        buf.write("\u0332\u0333\3\2\2\2\u0333\u0334\t\13\2\2\u0334\u0336")
        buf.write("\5\62\32\2\u0335\u0337\5\u0088E\2\u0336\u0335\3\2\2\2")
        buf.write("\u0336\u0337\3\2\2\2\u0337u\3\2\2\2\u0338\u0339\7\3\2")
        buf.write("\2\u0339\u033a\7.\2\2\u033a\u033b\5Z.\2\u033b\u033c\7")
        buf.write("/\2\2\u033c\u0340\3\2\2\2\u033d\u033f\5\u0088E\2\u033e")
        buf.write("\u033d\3\2\2\2\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2")
        buf.write("\u0340\u0341\3\2\2\2\u0341\u0343\3\2\2\2\u0342\u0340\3")
        buf.write("\2\2\2\u0343\u0347\7\62\2\2\u0344\u0346\5\u0088E\2\u0345")
        buf.write("\u0344\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2")
        buf.write("\u0347\u0348\3\2\2\2\u0348\u034b\3\2\2\2\u0349\u0347\3")
        buf.write("\2\2\2\u034a\u034c\5b\62\2\u034b\u034a\3\2\2\2\u034b\u034c")
        buf.write("\3\2\2\2\u034c\u0350\3\2\2\2\u034d\u034f\5\u0088E\2\u034e")
        buf.write("\u034d\3\2\2\2\u034f\u0352\3\2\2\2\u0350\u034e\3\2\2\2")
        buf.write("\u0350\u0351\3\2\2\2\u0351\u0353\3\2\2\2\u0352\u0350\3")
        buf.write("\2\2\2\u0353\u0357\7\63\2\2\u0354\u0356\5\u0088E\2\u0355")
        buf.write("\u0354\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0355\3\2\2\2")
        buf.write("\u0357\u0358\3\2\2\2\u0358\u035d\3\2\2\2\u0359\u0357\3")
        buf.write("\2\2\2\u035a\u035c\5x=\2\u035b\u035a\3\2\2\2\u035c\u035f")
        buf.write("\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e")
        buf.write("\u0363\3\2\2\2\u035f\u035d\3\2\2\2\u0360\u0362\5\u0088")
        buf.write("E\2\u0361\u0360\3\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361")
        buf.write("\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0367\3\2\2\2\u0365")
        buf.write("\u0363\3\2\2\2\u0366\u0368\5z>\2\u0367\u0366\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368w\3\2\2\2\u0369\u036a\7\4\2\2\u036a")
        buf.write("\u036b\7\3\2\2\u036b\u036c\7.\2\2\u036c\u036d\5Z.\2\u036d")
        buf.write("\u036e\7/\2\2\u036e\u0372\3\2\2\2\u036f\u0371\5\u0088")
        buf.write("E\2\u0370\u036f\3\2\2\2\u0371\u0374\3\2\2\2\u0372\u0370")
        buf.write("\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\3\2\2\2\u0374")
        buf.write("\u0372\3\2\2\2\u0375\u0379\7\62\2\2\u0376\u0378\5\u0088")
        buf.write("E\2\u0377\u0376\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377")
        buf.write("\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037d\3\2\2\2\u037b")
        buf.write("\u0379\3\2\2\2\u037c\u037e\5b\62\2\u037d\u037c\3\2\2\2")
        buf.write("\u037d\u037e\3\2\2\2\u037e\u0382\3\2\2\2\u037f\u0381\5")
        buf.write("\u0088E\2\u0380\u037f\3\2\2\2\u0381\u0384\3\2\2\2\u0382")
        buf.write("\u0380\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0385\3\2\2\2")
        buf.write("\u0384\u0382\3\2\2\2\u0385\u0386\7\63\2\2\u0386y\3\2\2")
        buf.write("\2\u0387\u038b\7\4\2\2\u0388\u038a\5\u0088E\2\u0389\u0388")
        buf.write("\3\2\2\2\u038a\u038d\3\2\2\2\u038b\u0389\3\2\2\2\u038b")
        buf.write("\u038c\3\2\2\2\u038c\u038e\3\2\2\2\u038d\u038b\3\2\2\2")
        buf.write("\u038e\u0392\7\62\2\2\u038f\u0391\5\u0088E\2\u0390\u038f")
        buf.write("\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2\u0392")
        buf.write("\u0393\3\2\2\2\u0393\u0396\3\2\2\2\u0394\u0392\3\2\2\2")
        buf.write("\u0395\u0397\5b\62\2\u0396\u0395\3\2\2\2\u0396\u0397\3")
        buf.write("\2\2\2\u0397\u039b\3\2\2\2\u0398\u039a\5\u0088E\2\u0399")
        buf.write("\u0398\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399\3\2\2\2")
        buf.write("\u039b\u039c\3\2\2\2\u039c\u039e\3\2\2\2\u039d\u039b\3")
        buf.write("\2\2\2\u039e\u039f\7\63\2\2\u039f{\3\2\2\2\u03a0\u03a1")
        buf.write("\7\5\2\2\u03a1\u03a5\5^\60\2\u03a2\u03a4\5\u0088E\2\u03a3")
        buf.write("\u03a2\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2")
        buf.write("\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2\u03a7\u03a5\3")
        buf.write("\2\2\2\u03a8\u03ac\7\62\2\2\u03a9\u03ab\5\u0088E\2\u03aa")
        buf.write("\u03a9\3\2\2\2\u03ab\u03ae\3\2\2\2\u03ac\u03aa\3\2\2\2")
        buf.write("\u03ac\u03ad\3\2\2\2\u03ad\u03b0\3\2\2\2\u03ae\u03ac\3")
        buf.write("\2\2\2\u03af\u03b1\5b\62\2\u03b0\u03af\3\2\2\2\u03b0\u03b1")
        buf.write("\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b6\7\63\2\2\u03b3")
        buf.write("\u03b5\5\u0088E\2\u03b4\u03b3\3\2\2\2\u03b5\u03b8\3\2")
        buf.write("\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7}\3")
        buf.write("\2\2\2\u03b8\u03b6\3\2\2\2\u03b9\u03ba\7\22\2\2\u03ba")
        buf.write("\u03bb\5\u0088E\2\u03bb\177\3\2\2\2\u03bc\u03bd\7\21\2")
        buf.write("\2\u03bd\u03be\5\u0088E\2\u03be\u0081\3\2\2\2\u03bf\u03c0")
        buf.write("\7\66\2\2\u03c0\u03c6\7,\2\2\u03c1\u03c2\7\66\2\2\u03c2")
        buf.write("\u03c3\5L\'\2\u03c3\u03c4\7,\2\2\u03c4\u03c6\3\2\2\2\u03c5")
        buf.write("\u03bf\3\2\2\2\u03c5\u03c1\3\2\2\2\u03c5\u03c6\3\2\2\2")
        buf.write("\u03c6\u03c7\3\2\2\2\u03c7\u03cd\5\u0084C\2\u03c8\u03cc")
        buf.write("\7\65\2\2\u03c9\u03cc\7=\2\2\u03ca\u03cc\5\u0088E\2\u03cb")
        buf.write("\u03c8\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03ca\3\2\2\2")
        buf.write("\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3")
        buf.write("\2\2\2\u03ce\u0083\3\2\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d1")
        buf.write("\7\66\2\2\u03d1\u03d3\7.\2\2\u03d2\u03d4\5V,\2\u03d3\u03d2")
        buf.write("\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5")
        buf.write("\u03d6\7/\2\2\u03d6\u0085\3\2\2\2\u03d7\u03d8\7\6\2\2")
        buf.write("\u03d8\u0400\5\u0088E\2\u03d9\u03fa\7\6\2\2\u03da\u03fb")
        buf.write("\7\66\2\2\u03db\u03fb\5\60\31\2\u03dc\u03dd\5\62\32\2")
        buf.write("\u03dd\u03de\t\f\2\2\u03de\u03df\5\62\32\2\u03df\u03fb")
        buf.write("\3\2\2\2\u03e0\u03e5\7\66\2\2\u03e1\u03e2\7,\2\2\u03e2")
        buf.write("\u03e4\7\66\2\2\u03e3\u03e1\3\2\2\2\u03e4\u03e7\3\2\2")
        buf.write("\2\u03e5\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03fb")
        buf.write("\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e8\u03e9\7.\2\2\u03e9")
        buf.write("\u03ea\5\62\32\2\u03ea\u03eb\7/\2\2\u03eb\u03ec\7,\2\2")
        buf.write("\u03ec\u03ed\7\66\2\2\u03ed\u03fb\3\2\2\2\u03ee\u03ef")
        buf.write("\7.\2\2\u03ef\u03f0\5\62\32\2\u03f0\u03f1\7/\2\2\u03f1")
        buf.write("\u03f2\7\60\2\2\u03f2\u03f3\5\62\32\2\u03f3\u03f8\7\61")
        buf.write("\2\2\u03f4\u03f5\7\60\2\2\u03f5\u03f6\5\62\32\2\u03f6")
        buf.write("\u03f7\7\61\2\2\u03f7\u03f9\3\2\2\2\u03f8\u03f4\3\2\2")
        buf.write("\2\u03f8\u03f9\3\2\2\2\u03f9\u03fb\3\2\2\2\u03fa\u03da")
        buf.write("\3\2\2\2\u03fa\u03db\3\2\2\2\u03fa\u03dc\3\2\2\2\u03fa")
        buf.write("\u03e0\3\2\2\2\u03fa\u03e8\3\2\2\2\u03fa\u03ee\3\2\2\2")
        buf.write("\u03fb\u03fd\3\2\2\2\u03fc\u03fe\5\u0088E\2\u03fd\u03fc")
        buf.write("\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u0400\3\2\2\2\u03ff")
        buf.write("\u03d7\3\2\2\2\u03ff\u03d9\3\2\2\2\u0400\u0087\3\2\2\2")
        buf.write("\u0401\u0405\7\65\2\2\u0402\u0404\7=\2\2\u0403\u0402\3")
        buf.write("\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406")
        buf.write("\3\2\2\2\u0406\u040e\3\2\2\2\u0407\u0405\3\2\2\2\u0408")
        buf.write("\u040a\7=\2\2\u0409\u0408\3\2\2\2\u040a\u040b\3\2\2\2")
        buf.write("\u040b\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040e\3")
        buf.write("\2\2\2\u040d\u0401\3\2\2\2\u040d\u0409\3\2\2\2\u040e\u0089")
        buf.write("\3\2\2\2\u0081\u008d\u0093\u0095\u00a0\u00a6\u00ab\u00af")
        buf.write("\u00b5\u00c1\u00d4\u00d7\u00d9\u00fc\u0108\u0114\u011d")
        buf.write("\u0126\u0128\u0130\u0134\u013c\u0140\u014a\u0156\u0160")
        buf.write("\u0164\u0168\u016d\u0171\u0174\u0178\u017f\u0186\u018d")
        buf.write("\u0190\u0197\u019c\u01a1\u01a6\u01af\u01b4\u01b9\u01bb")
        buf.write("\u01c6\u01cf\u01d3\u01d8\u01dd\u01e2\u01e7\u01ed\u01f2")
        buf.write("\u01f6\u0203\u020d\u0218\u0223\u022e\u0239\u023f\u0247")
        buf.write("\u024a\u0256\u0258\u0262\u0269\u026d\u0279\u0283\u028e")
        buf.write("\u0296\u02aa\u02ae\u02b5\u02b9\u02c0\u02c5\u02cf\u02d4")
        buf.write("\u02da\u02e1\u02e6\u02ea\u02f4\u02f8\u02fd\u0301\u030b")
        buf.write("\u0313\u0317\u0320\u0325\u0329\u0331\u0336\u0340\u0347")
        buf.write("\u034b\u0350\u0357\u035d\u0363\u0367\u0372\u0379\u037d")
        buf.write("\u0382\u038b\u0392\u0396\u039b\u03a5\u03ac\u03b0\u03b6")
        buf.write("\u03c5\u03cb\u03cd\u03d3\u03e5\u03f8\u03fa\u03fd\u03ff")
        buf.write("\u0405\u040b\u040d")
        return buf.getvalue()


class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
                     "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", 
                     "'!'", "'='", "':='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'.'", "':'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "','", "';'" ]

    symbolicNames = [ "<INVALID>", "IF", "ELSE", "FOR", "RETURN", "FUNCTION", 
                      "TYPE", "STRUCT", "INTERFACE", "STRING", "INTEGER", 
                      "FLOAT", "BOOLEAN", "CONSTANT", "VARIABLE", "CONTINUE", 
                      "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", 
                      "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "GT", "LEQ", 
                      "GEQ", "AND", "OR", "NOT", "ASSIGN", "ASSIGN_VAR", 
                      "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", "ASSIGN_DIV", 
                      "ASSIGN_MOD", "DOT", "COLON", "LP", "RP", "SLP", "SRP", 
                      "CLP", "CRP", "COMMA", "SEMICOLON", "ID", "INT_LIT", 
                      "FLOAT_LIT", "BIN", "OCT", "HEX", "STRING_LIT", "NEWLINE", 
                      "LINE_COMMENT", "BLOCK_COMMENT", "WS", "ERROR_CHAR", 
                      "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    RULE_program = 0
    RULE_declared = 1
    RULE_function_declared = 2
    RULE_variables_declared = 3
    RULE_inferred_var = 4
    RULE_struct_variable_declared = 5
    RULE_keyword_type_var = 6
    RULE_keyword_type_var_infunction = 7
    RULE_keyword_type_var_inmethod = 8
    RULE_list_number_lit = 9
    RULE_type_key = 10
    RULE_type_key_variable = 11
    RULE_constants_declared = 12
    RULE_function = 13
    RULE_list_para_infunction = 14
    RULE_list_para_infunction_method = 15
    RULE_struct_declared = 16
    RULE_struct_variable_list = 17
    RULE_struct_variable_list_recur = 18
    RULE_method_declared = 19
    RULE_list_para_inmethod = 20
    RULE_interface_declared = 21
    RULE_list_para_interface = 22
    RULE_literal = 23
    RULE_expression = 24
    RULE_expression1 = 25
    RULE_expression2 = 26
    RULE_expression3 = 27
    RULE_expression4 = 28
    RULE_expression5 = 29
    RULE_expression6 = 30
    RULE_expression7 = 31
    RULE_array_literal = 32
    RULE_array_element_set = 33
    RULE_array_literal_declare = 34
    RULE_array_elements = 35
    RULE_valid_element = 36
    RULE_dimensions = 37
    RULE_type_literal = 38
    RULE_type_literal_except_struct = 39
    RULE_struct_literal = 40
    RULE_struct_literal_recur = 41
    RULE_index_operators = 42
    RULE_index_operators_recur = 43
    RULE_argument_list = 44
    RULE_argument_list_recur = 45
    RULE_for_argument_list = 46
    RULE_variables_declared_for = 47
    RULE_list_statement = 48
    RULE_list_statement_recur = 49
    RULE_statement = 50
    RULE_list_statement_in_function = 51
    RULE_list_statement_in_function_recur = 52
    RULE_statement_in_function = 53
    RULE_declared_statement = 54
    RULE_declared_statement_no_ignore = 55
    RULE_constants_declared_in_function = 56
    RULE_assign_statement = 57
    RULE_if_statement = 58
    RULE_elif_statement = 59
    RULE_else_statement = 60
    RULE_for_statement = 61
    RULE_break_statement = 62
    RULE_continue_statement = 63
    RULE_call_statement = 64
    RULE_function_call = 65
    RULE_return_statement = 66
    RULE_ignore = 67

    ruleNames =  [ "program", "declared", "function_declared", "variables_declared", 
                   "inferred_var", "struct_variable_declared", "keyword_type_var", 
                   "keyword_type_var_infunction", "keyword_type_var_inmethod", 
                   "list_number_lit", "type_key", "type_key_variable", "constants_declared", 
                   "function", "list_para_infunction", "list_para_infunction_method", 
                   "struct_declared", "struct_variable_list", "struct_variable_list_recur", 
                   "method_declared", "list_para_inmethod", "interface_declared", 
                   "list_para_interface", "literal", "expression", "expression1", 
                   "expression2", "expression3", "expression4", "expression5", 
                   "expression6", "expression7", "array_literal", "array_element_set", 
                   "array_literal_declare", "array_elements", "valid_element", 
                   "dimensions", "type_literal", "type_literal_except_struct", 
                   "struct_literal", "struct_literal_recur", "index_operators", 
                   "index_operators_recur", "argument_list", "argument_list_recur", 
                   "for_argument_list", "variables_declared_for", "list_statement", 
                   "list_statement_recur", "statement", "list_statement_in_function", 
                   "list_statement_in_function_recur", "statement_in_function", 
                   "declared_statement", "declared_statement_no_ignore", 
                   "constants_declared_in_function", "assign_statement", 
                   "if_statement", "elif_statement", "else_statement", "for_statement", 
                   "break_statement", "continue_statement", "call_statement", 
                   "function_call", "return_statement", "ignore" ]

    EOF = Token.EOF
    IF=1
    ELSE=2
    FOR=3
    RETURN=4
    FUNCTION=5
    TYPE=6
    STRUCT=7
    INTERFACE=8
    STRING=9
    INTEGER=10
    FLOAT=11
    BOOLEAN=12
    CONSTANT=13
    VARIABLE=14
    CONTINUE=15
    BREAK=16
    RANGE=17
    NIL=18
    TRUE=19
    FALSE=20
    ADD=21
    SUB=22
    MUL=23
    DIV=24
    MOD=25
    EQ=26
    NEQ=27
    LT=28
    GT=29
    LEQ=30
    GEQ=31
    AND=32
    OR=33
    NOT=34
    ASSIGN=35
    ASSIGN_VAR=36
    ASSIGN_ADD=37
    ASSIGN_SUB=38
    ASSIGN_MUL=39
    ASSIGN_DIV=40
    ASSIGN_MOD=41
    DOT=42
    COLON=43
    LP=44
    RP=45
    SLP=46
    SRP=47
    CLP=48
    CRP=49
    COMMA=50
    SEMICOLON=51
    ID=52
    INT_LIT=53
    FLOAT_LIT=54
    BIN=55
    OCT=56
    HEX=57
    STRING_LIT=58
    NEWLINE=59
    LINE_COMMENT=60
    BLOCK_COMMENT=61
    WS=62
    ERROR_CHAR=63
    UNCLOSE_STRING=64
    ILLEGAL_ESCAPE=65

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.DeclaredContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.DeclaredContext,i)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.NEWLINE:
                self.state = 136
                self.match(MiniGoParser.NEWLINE)
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 142
            self.declared()
            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.FUNCTION) | (1 << MiniGoParser.TYPE) | (1 << MiniGoParser.CONSTANT) | (1 << MiniGoParser.VARIABLE) | (1 << MiniGoParser.NEWLINE))) != 0):
                self.state = 145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MiniGoParser.FUNCTION, MiniGoParser.TYPE, MiniGoParser.CONSTANT, MiniGoParser.VARIABLE]:
                    self.state = 143
                    self.declared()
                    pass
                elif token in [MiniGoParser.NEWLINE]:
                    self.state = 144
                    self.match(MiniGoParser.NEWLINE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 150
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def constants_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declaredContext,0)


        def function_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Function_declaredContext,0)


        def method_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declaredContext,0)


        def struct_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declaredContext,0)


        def interface_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared" ):
                return visitor.visitDeclared(self)
            else:
                return visitor.visitChildren(self)




    def declared(self):

        localctx = MiniGoParser.DeclaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declared)
        try:
            self.state = 158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 152
                self.variables_declared()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 153
                self.constants_declared()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 154
                self.function_declared()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 155
                self.method_declared()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 156
                self.struct_declared()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 157
                self.interface_declared()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self):
            return self.getTypedRuleContext(MiniGoParser.FunctionContext,0)


        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_declared" ):
                return visitor.visitFunction_declared(self)
            else:
                return visitor.visitChildren(self)




    def function_declared(self):

        localctx = MiniGoParser.Function_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_function_declared)
        try:
            self.state = 164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.FUNCTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 160
                self.function()
                pass
            elif token in [MiniGoParser.VARIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 161
                self.variables_declared()
                self.state = 162
                self.ignore()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variables_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def inferred_var(self):
            return self.getTypedRuleContext(MiniGoParser.Inferred_varContext,0)


        def keyword_type_var(self):
            return self.getTypedRuleContext(MiniGoParser.Keyword_type_varContext,0)


        def struct_variable_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_variable_declaredContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_variables_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariables_declared" ):
                return visitor.visitVariables_declared(self)
            else:
                return visitor.visitChildren(self)




    def variables_declared(self):

        localctx = MiniGoParser.Variables_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_variables_declared)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 166
                self.inferred_var()
                pass

            elif la_ == 2:
                self.state = 167
                self.keyword_type_var()
                pass

            elif la_ == 3:
                self.state = 168
                self.struct_variable_declared()
                pass


            self.state = 171
            self.match(MiniGoParser.SEMICOLON)
            self.state = 173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 172
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inferred_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(MiniGoParser.VARIABLE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def type_key_variable(self):
            return self.getTypedRuleContext(MiniGoParser.Type_key_variableContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_inferred_var

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInferred_var" ):
                return visitor.visitInferred_var(self)
            else:
                return visitor.visitChildren(self)




    def inferred_var(self):

        localctx = MiniGoParser.Inferred_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_inferred_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self.match(MiniGoParser.VARIABLE)
            self.state = 176
            self.match(MiniGoParser.ID)
            self.state = 179
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN]:
                self.state = 177
                self.type_key_variable()
                pass
            elif token in [MiniGoParser.SLP]:
                self.state = 178
                self.array_literal()
                pass
            elif token in [MiniGoParser.ASSIGN]:
                pass
            else:
                pass
            self.state = 181
            self.match(MiniGoParser.ASSIGN)
            self.state = 182
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_variable_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(MiniGoParser.VARIABLE, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def type_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Type_literalContext,0)


        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def array_elements(self):
            return self.getTypedRuleContext(MiniGoParser.Array_elementsContext,0)


        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def struct_literal_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_recurContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.ExpressionContext,i)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def LEQ(self):
            return self.getToken(MiniGoParser.LEQ, 0)

        def GEQ(self):
            return self.getToken(MiniGoParser.GEQ, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.DOT)
            else:
                return self.getToken(MiniGoParser.DOT, i)

        def SLP(self):
            return self.getToken(MiniGoParser.SLP, 0)

        def SRP(self):
            return self.getToken(MiniGoParser.SRP, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_variable_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_variable_declared" ):
                return visitor.visitStruct_variable_declared(self)
            else:
                return visitor.visitChildren(self)




    def struct_variable_declared(self):

        localctx = MiniGoParser.Struct_variable_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_struct_variable_declared)
        self._la = 0 # Token type
        try:
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 184
                self.match(MiniGoParser.VARIABLE)
                self.state = 185
                self.match(MiniGoParser.ID)
                self.state = 186
                self.match(MiniGoParser.ID)
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ASSIGN:
                    self.state = 187
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 188
                    self.dimensions()
                    self.state = 189
                    self.type_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.match(MiniGoParser.VARIABLE)
                self.state = 194
                self.match(MiniGoParser.ID)
                self.state = 195
                self.match(MiniGoParser.ID)
                self.state = 196
                self.match(MiniGoParser.ASSIGN)
                self.state = 197
                self.dimensions()
                self.state = 198
                self.type_literal()
                self.state = 199
                self.match(MiniGoParser.CLP)
                self.state = 200
                self.array_elements()
                self.state = 201
                self.match(MiniGoParser.CRP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 203
                self.match(MiniGoParser.VARIABLE)
                self.state = 204
                self.match(MiniGoParser.ID)
                self.state = 205
                self.match(MiniGoParser.ID)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.ASSIGN:
                    self.state = 206
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 207
                    self.match(MiniGoParser.ID)
                    self.state = 213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MiniGoParser.CLP:
                        self.state = 208
                        self.match(MiniGoParser.CLP)
                        self.state = 210
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MiniGoParser.ID:
                            self.state = 209
                            self.struct_literal_recur()


                        self.state = 212
                        self.match(MiniGoParser.CRP)




                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 217
                self.match(MiniGoParser.VARIABLE)
                self.state = 218
                self.match(MiniGoParser.ID)
                self.state = 219
                self.match(MiniGoParser.ID)
                self.state = 220
                self.match(MiniGoParser.ASSIGN)
                self.state = 221
                self.expression(0)
                self.state = 222
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.ADD) | (1 << MiniGoParser.SUB) | (1 << MiniGoParser.MUL) | (1 << MiniGoParser.DIV) | (1 << MiniGoParser.MOD))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 223
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 225
                self.match(MiniGoParser.VARIABLE)
                self.state = 226
                self.match(MiniGoParser.ID)
                self.state = 227
                self.match(MiniGoParser.ID)
                self.state = 228
                self.match(MiniGoParser.ASSIGN)
                self.state = 229
                self.expression(0)
                self.state = 230
                _la = self._input.LA(1)
                if not(_la==MiniGoParser.AND or _la==MiniGoParser.OR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 231
                self.expression(0)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 233
                self.match(MiniGoParser.VARIABLE)
                self.state = 234
                self.match(MiniGoParser.ID)
                self.state = 235
                self.match(MiniGoParser.ID)
                self.state = 236
                self.match(MiniGoParser.ASSIGN)
                self.state = 237
                self.expression(0)
                self.state = 238
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.EQ) | (1 << MiniGoParser.NEQ) | (1 << MiniGoParser.LT) | (1 << MiniGoParser.GT) | (1 << MiniGoParser.LEQ) | (1 << MiniGoParser.GEQ))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 239
                self.expression(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 241
                self.match(MiniGoParser.VARIABLE)
                self.state = 242
                self.match(MiniGoParser.ID)
                self.state = 243
                self.match(MiniGoParser.ID)
                self.state = 244
                self.match(MiniGoParser.ASSIGN)
                self.state = 245
                self.match(MiniGoParser.ID)
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.DOT:
                    self.state = 246
                    self.match(MiniGoParser.DOT)
                    self.state = 247
                    self.match(MiniGoParser.ID)
                    self.state = 252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 253
                self.match(MiniGoParser.VARIABLE)
                self.state = 254
                self.match(MiniGoParser.ID)
                self.state = 255
                self.match(MiniGoParser.ID)
                self.state = 256
                self.match(MiniGoParser.ASSIGN)
                self.state = 257
                self.expression(0)
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.DOT:
                    self.state = 258
                    self.match(MiniGoParser.DOT)
                    self.state = 259
                    self.expression(0)
                    self.state = 264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 265
                self.match(MiniGoParser.VARIABLE)
                self.state = 266
                self.match(MiniGoParser.ID)
                self.state = 267
                self.match(MiniGoParser.ID)
                self.state = 268
                self.match(MiniGoParser.ASSIGN)
                self.state = 269
                self.expression(0)
                self.state = 270
                self.match(MiniGoParser.SLP)
                self.state = 271
                self.expression(0)
                self.state = 272
                self.match(MiniGoParser.SRP)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_type_varContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(MiniGoParser.VARIABLE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def type_key_variable(self):
            return self.getTypedRuleContext(MiniGoParser.Type_key_variableContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def array_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Array_literalContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Array_literalContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_keyword_type_var

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_type_var" ):
                return visitor.visitKeyword_type_var(self)
            else:
                return visitor.visitChildren(self)




    def keyword_type_var(self):

        localctx = MiniGoParser.Keyword_type_varContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_keyword_type_var)
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.match(MiniGoParser.VARIABLE)
                self.state = 277
                self.match(MiniGoParser.ID)
                self.state = 278
                self.type_key_variable()
                self.state = 283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 279
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 280
                    self.expression(0)

                elif la_ == 2:
                    self.state = 281
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 282
                    self.array_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.match(MiniGoParser.VARIABLE)
                self.state = 286
                self.match(MiniGoParser.ID)
                self.state = 287
                self.array_literal()
                self.state = 292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 288
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 289
                    self.expression(0)

                elif la_ == 2:
                    self.state = 290
                    self.match(MiniGoParser.ASSIGN)
                    self.state = 291
                    self.array_literal()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_type_var_infunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def list_number_lit(self):
            return self.getTypedRuleContext(MiniGoParser.List_number_litContext,0)


        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def type_key(self):
            return self.getTypedRuleContext(MiniGoParser.Type_keyContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_keyword_type_var_infunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_type_var_infunction" ):
                return visitor.visitKeyword_type_var_infunction(self)
            else:
                return visitor.visitChildren(self)




    def keyword_type_var_infunction(self):

        localctx = MiniGoParser.Keyword_type_var_infunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_keyword_type_var_infunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 296
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 297
                self.match(MiniGoParser.ID)
                self.state = 298
                self.match(MiniGoParser.LP)
                self.state = 299
                self.list_number_lit()
                self.state = 300
                self.match(MiniGoParser.RP)
                pass


            self.state = 306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                self.state = 304
                self.type_key()
                pass
            elif token in [MiniGoParser.SLP]:
                self.state = 305
                self.array_literal()
                pass
            elif token in [MiniGoParser.RP, MiniGoParser.COMMA]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_type_var_inmethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def list_number_lit(self):
            return self.getTypedRuleContext(MiniGoParser.List_number_litContext,0)


        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def type_key(self):
            return self.getTypedRuleContext(MiniGoParser.Type_keyContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_keyword_type_var_inmethod

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_type_var_inmethod" ):
                return visitor.visitKeyword_type_var_inmethod(self)
            else:
                return visitor.visitChildren(self)




    def keyword_type_var_inmethod(self):

        localctx = MiniGoParser.Keyword_type_var_inmethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_keyword_type_var_inmethod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 308
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 309
                self.match(MiniGoParser.ID)
                self.state = 310
                self.match(MiniGoParser.LP)
                self.state = 311
                self.list_number_lit()
                self.state = 312
                self.match(MiniGoParser.RP)
                pass


            self.state = 318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                self.state = 316
                self.type_key()
                pass
            elif token in [MiniGoParser.SLP]:
                self.state = 317
                self.array_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_number_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_number_lit(self):
            return self.getTypedRuleContext(MiniGoParser.List_number_litContext,0)


        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_list_number_lit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_number_lit" ):
                return visitor.visitList_number_lit(self)
            else:
                return visitor.visitChildren(self)




    def list_number_lit(self):

        localctx = MiniGoParser.List_number_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_list_number_lit)
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.match(MiniGoParser.INT_LIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.match(MiniGoParser.INT_LIT)
                self.state = 322
                self.match(MiniGoParser.COMMA)
                self.state = 323
                self.list_number_lit()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 324
                self.match(MiniGoParser.FLOAT_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 325
                self.match(MiniGoParser.FLOAT_LIT)
                self.state = 326
                self.match(MiniGoParser.COMMA)
                self.state = 327
                self.list_number_lit()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(MiniGoParser.INTEGER, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_type_key

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_key" ):
                return visitor.visitType_key(self)
            else:
                return visitor.visitChildren(self)




    def type_key(self):

        localctx = MiniGoParser.Type_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_type_key)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.STRING) | (1 << MiniGoParser.INTEGER) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN) | (1 << MiniGoParser.ID))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_key_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(MiniGoParser.INTEGER, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_type_key_variable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_key_variable" ):
                return visitor.visitType_key_variable(self)
            else:
                return visitor.visitChildren(self)




    def type_key_variable(self):

        localctx = MiniGoParser.Type_key_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_type_key_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.STRING) | (1 << MiniGoParser.INTEGER) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constants_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTANT(self):
            return self.getToken(MiniGoParser.CONSTANT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_constants_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstants_declared" ):
                return visitor.visitConstants_declared(self)
            else:
                return visitor.visitChildren(self)




    def constants_declared(self):

        localctx = MiniGoParser.Constants_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_constants_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(MiniGoParser.CONSTANT)
            self.state = 335
            self.match(MiniGoParser.ID)
            self.state = 336
            self.match(MiniGoParser.ASSIGN)
            self.state = 337
            self.expression(0)
            self.state = 338
            _la = self._input.LA(1)
            if not(_la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 339
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(MiniGoParser.FUNCTION, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def type_key(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Type_keyContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Type_keyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.COMMA)
            else:
                return self.getToken(MiniGoParser.COMMA, i)

        def list_para_infunction(self):
            return self.getTypedRuleContext(MiniGoParser.List_para_infunctionContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def list_statement_in_function(self):
            return self.getTypedRuleContext(MiniGoParser.List_statement_in_functionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction" ):
                return visitor.visitFunction(self)
            else:
                return visitor.visitChildren(self)




    def function(self):

        localctx = MiniGoParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(MiniGoParser.FUNCTION)
            self.state = 343
            self.match(MiniGoParser.ID)
            self.state = 344
            self.match(MiniGoParser.LP)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 345
                self.match(MiniGoParser.ID)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.COMMA:
                    self.state = 346
                    self.match(MiniGoParser.COMMA)
                    self.state = 347
                    self.match(MiniGoParser.ID)
                    self.state = 352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 353
                self.type_key()


            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.COMMA:
                self.state = 356
                self.match(MiniGoParser.COMMA)
                self.state = 357
                self.list_para_infunction()


            self.state = 360
            self.match(MiniGoParser.RP)
            self.state = 363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                self.state = 361
                self.type_key()
                pass
            elif token in [MiniGoParser.SLP]:
                self.state = 362
                self.array_literal()
                pass
            elif token in [MiniGoParser.CLP]:
                pass
            else:
                pass
            self.state = 365
            self.match(MiniGoParser.CLP)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 366
                self.ignore()


            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.CONSTANT) | (1 << MiniGoParser.VARIABLE) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 369
                self.list_statement_in_function()


            self.state = 372
            self.match(MiniGoParser.CRP)
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 373
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_para_infunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_type_var_infunction(self):
            return self.getTypedRuleContext(MiniGoParser.Keyword_type_var_infunctionContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_para_infunction(self):
            return self.getTypedRuleContext(MiniGoParser.List_para_infunctionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_para_infunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_para_infunction" ):
                return visitor.visitList_para_infunction(self)
            else:
                return visitor.visitChildren(self)




    def list_para_infunction(self):

        localctx = MiniGoParser.List_para_infunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_list_para_infunction)
        try:
            self.state = 381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 376
                self.keyword_type_var_infunction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 377
                self.keyword_type_var_infunction()
                self.state = 378
                self.match(MiniGoParser.COMMA)
                self.state = 379
                self.list_para_infunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_para_infunction_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_type_var_inmethod(self):
            return self.getTypedRuleContext(MiniGoParser.Keyword_type_var_inmethodContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_para_infunction_method(self):
            return self.getTypedRuleContext(MiniGoParser.List_para_infunction_methodContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_para_infunction_method

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_para_infunction_method" ):
                return visitor.visitList_para_infunction_method(self)
            else:
                return visitor.visitChildren(self)




    def list_para_infunction_method(self):

        localctx = MiniGoParser.List_para_infunction_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_list_para_infunction_method)
        try:
            self.state = 388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 383
                self.keyword_type_var_inmethod()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                self.keyword_type_var_inmethod()
                self.state = 385
                self.match(MiniGoParser.COMMA)
                self.state = 386
                self.list_para_infunction_method()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def struct_variable_list(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_variable_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declared" ):
                return visitor.visitStruct_declared(self)
            else:
                return visitor.visitChildren(self)




    def struct_declared(self):

        localctx = MiniGoParser.Struct_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_struct_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(MiniGoParser.TYPE)
            self.state = 391
            self.match(MiniGoParser.ID)
            self.state = 392
            self.match(MiniGoParser.STRUCT)
            self.state = 393
            self.match(MiniGoParser.CLP)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 394
                self.ignore()


            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 397
                self.struct_variable_list()


            self.state = 400
            self.match(MiniGoParser.CRP)
            self.state = 401
            self.ignore()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_variable_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_variable_list_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_variable_list_recurContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_variable_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_variable_list" ):
                return visitor.visitStruct_variable_list(self)
            else:
                return visitor.visitChildren(self)




    def struct_variable_list(self):

        localctx = MiniGoParser.Struct_variable_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_struct_variable_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.struct_variable_list_recur()
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 404
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_variable_list_recurContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def type_key(self):
            return self.getTypedRuleContext(MiniGoParser.Type_keyContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def struct_variable_list_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_variable_list_recurContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_variable_list_recur

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_variable_list_recur" ):
                return visitor.visitStruct_variable_list_recur(self)
            else:
                return visitor.visitChildren(self)




    def struct_variable_list_recur(self):

        localctx = MiniGoParser.Struct_variable_list_recurContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_struct_variable_list_recur)
        try:
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 407
                self.match(MiniGoParser.ID)
                self.state = 410
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                    self.state = 408
                    self.type_key()
                    pass
                elif token in [MiniGoParser.SLP]:
                    self.state = 409
                    self.array_literal()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.match(MiniGoParser.ID)
                self.state = 415
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                    self.state = 413
                    self.type_key()
                    pass
                elif token in [MiniGoParser.SLP]:
                    self.state = 414
                    self.array_literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 417
                self.ignore()
                self.state = 418
                self.struct_variable_list_recur()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(MiniGoParser.FUNCTION, 0)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LP)
            else:
                return self.getToken(MiniGoParser.LP, i)

        def list_para_inmethod(self):
            return self.getTypedRuleContext(MiniGoParser.List_para_inmethodContext,0)


        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RP)
            else:
                return self.getToken(MiniGoParser.RP, i)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def list_para_infunction_method(self):
            return self.getTypedRuleContext(MiniGoParser.List_para_infunction_methodContext,0)


        def type_key(self):
            return self.getTypedRuleContext(MiniGoParser.Type_keyContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def list_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.List_statementContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.List_statementContext,i)


        def argument_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Argument_listContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Argument_listContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_declared" ):
                return visitor.visitMethod_declared(self)
            else:
                return visitor.visitChildren(self)




    def method_declared(self):

        localctx = MiniGoParser.Method_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_method_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(MiniGoParser.FUNCTION)
            self.state = 423
            self.match(MiniGoParser.LP)
            self.state = 424
            self.list_para_inmethod()
            self.state = 425
            self.match(MiniGoParser.RP)
            self.state = 426
            self.match(MiniGoParser.ID)
            self.state = 427
            self.match(MiniGoParser.LP)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 428
                self.list_para_infunction_method()


            self.state = 431
            self.match(MiniGoParser.RP)
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                self.state = 432
                self.type_key()
                pass
            elif token in [MiniGoParser.SLP]:
                self.state = 433
                self.array_literal()
                pass
            elif token in [MiniGoParser.CLP]:
                pass
            else:
                pass
            self.state = 436
            self.match(MiniGoParser.CLP)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.VARIABLE) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.TRUE) | (1 << MiniGoParser.FALSE) | (1 << MiniGoParser.SUB) | (1 << MiniGoParser.NOT) | (1 << MiniGoParser.LP) | (1 << MiniGoParser.SLP) | (1 << MiniGoParser.ID) | (1 << MiniGoParser.INT_LIT) | (1 << MiniGoParser.FLOAT_LIT) | (1 << MiniGoParser.BIN) | (1 << MiniGoParser.OCT) | (1 << MiniGoParser.HEX) | (1 << MiniGoParser.STRING_LIT))) != 0):
                self.state = 439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 437
                    self.list_statement()
                    pass

                elif la_ == 2:
                    self.state = 438
                    self.argument_list()
                    pass


                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self.match(MiniGoParser.CRP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_para_inmethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def list_para_inmethod(self):
            return self.getTypedRuleContext(MiniGoParser.List_para_inmethodContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_para_inmethod

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_para_inmethod" ):
                return visitor.visitList_para_inmethod(self)
            else:
                return visitor.visitChildren(self)




    def list_para_inmethod(self):

        localctx = MiniGoParser.List_para_inmethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_list_para_inmethod)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.match(MiniGoParser.ID)
                self.state = 447
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.match(MiniGoParser.ID)
                self.state = 449
                self.match(MiniGoParser.ID)
                self.state = 450
                self.match(MiniGoParser.COMMA)
                self.state = 451
                self.list_para_inmethod()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declaredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def list_para_interface(self):
            return self.getTypedRuleContext(MiniGoParser.List_para_interfaceContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_declared

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterface_declared" ):
                return visitor.visitInterface_declared(self)
            else:
                return visitor.visitChildren(self)




    def interface_declared(self):

        localctx = MiniGoParser.Interface_declaredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_interface_declared)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(MiniGoParser.TYPE)
            self.state = 455
            self.match(MiniGoParser.ID)
            self.state = 456
            self.match(MiniGoParser.INTERFACE)
            self.state = 457
            self.match(MiniGoParser.CLP)
            self.state = 461
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 458
                    self.ignore() 
                self.state = 463
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 464
                self.list_para_interface()


            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 467
                self.ignore()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 473
            self.match(MiniGoParser.CRP)
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 474
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_para_interfaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def LP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LP)
            else:
                return self.getToken(MiniGoParser.LP, i)

        def RP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RP)
            else:
                return self.getToken(MiniGoParser.RP, i)

        def list_para_infunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.List_para_infunctionContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.List_para_infunctionContext,i)


        def type_key(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Type_keyContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Type_keyContext,i)


        def array_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Array_literalContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Array_literalContext,i)


        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_para_interface

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_para_interface" ):
                return visitor.visitList_para_interface(self)
            else:
                return visitor.visitChildren(self)




    def list_para_interface(self):

        localctx = MiniGoParser.List_para_interfaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_list_para_interface)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(MiniGoParser.ID)
            self.state = 478
            self.match(MiniGoParser.LP)
            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ID:
                self.state = 479
                self.list_para_infunction()


            self.state = 482
            self.match(MiniGoParser.RP)
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                self.state = 483
                self.type_key()
                pass
            elif token in [MiniGoParser.SLP]:
                self.state = 484
                self.array_literal()
                pass
            elif token in [MiniGoParser.CRP, MiniGoParser.SEMICOLON, MiniGoParser.NEWLINE]:
                pass
            else:
                pass
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.ignore()
                    self.state = 488
                    self.match(MiniGoParser.ID)
                    self.state = 489
                    self.match(MiniGoParser.LP)
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MiniGoParser.ID:
                        self.state = 490
                        self.list_para_infunction()


                    self.state = 493
                    self.match(MiniGoParser.RP)
                    self.state = 496
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN, MiniGoParser.ID]:
                        self.state = 494
                        self.type_key()
                        pass
                    elif token in [MiniGoParser.SLP]:
                        self.state = 495
                        self.array_literal()
                        pass
                    elif token in [MiniGoParser.CRP, MiniGoParser.SEMICOLON, MiniGoParser.NEWLINE]:
                        pass
                    else:
                        pass 
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def BIN(self):
            return self.getToken(MiniGoParser.BIN, 0)

        def OCT(self):
            return self.getToken(MiniGoParser.OCT, 0)

        def HEX(self):
            return self.getToken(MiniGoParser.HEX, 0)

        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_literal)
        try:
            self.state = 513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 503
                self.match(MiniGoParser.INT_LIT)
                pass
            elif token in [MiniGoParser.BIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 504
                self.match(MiniGoParser.BIN)
                pass
            elif token in [MiniGoParser.OCT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 505
                self.match(MiniGoParser.OCT)
                pass
            elif token in [MiniGoParser.HEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 506
                self.match(MiniGoParser.HEX)
                pass
            elif token in [MiniGoParser.FLOAT_LIT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 507
                self.match(MiniGoParser.FLOAT_LIT)
                pass
            elif token in [MiniGoParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 508
                self.match(MiniGoParser.STRING_LIT)
                pass
            elif token in [MiniGoParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 509
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [MiniGoParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 510
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [MiniGoParser.SLP]:
                self.enterOuterAlt(localctx, 9)
                self.state = 511
                self.array_literal()
                pass
            elif token in [MiniGoParser.ID]:
                self.enterOuterAlt(localctx, 10)
                self.state = 512
                self.struct_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression1(self):
            return self.getTypedRuleContext(MiniGoParser.Expression1Context,0)


        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.expression1(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 523
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 518
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 519
                    self.match(MiniGoParser.OR)
                    self.state = 520
                    self.expression1(0) 
                self.state = 525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression2(self):
            return self.getTypedRuleContext(MiniGoParser.Expression2Context,0)


        def expression1(self):
            return self.getTypedRuleContext(MiniGoParser.Expression1Context,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression1" ):
                return visitor.visitExpression1(self)
            else:
                return visitor.visitChildren(self)



    def expression1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_expression1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.expression2(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression1)
                    self.state = 529
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 530
                    self.match(MiniGoParser.AND)
                    self.state = 531
                    self.expression2(0) 
                self.state = 536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression3(self):
            return self.getTypedRuleContext(MiniGoParser.Expression3Context,0)


        def expression2(self):
            return self.getTypedRuleContext(MiniGoParser.Expression2Context,0)


        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def LEQ(self):
            return self.getToken(MiniGoParser.LEQ, 0)

        def GEQ(self):
            return self.getToken(MiniGoParser.GEQ, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression2" ):
                return visitor.visitExpression2(self)
            else:
                return visitor.visitChildren(self)



    def expression2(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression2Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_expression2, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.expression3(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression2Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression2)
                    self.state = 540
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 541
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.EQ) | (1 << MiniGoParser.NEQ) | (1 << MiniGoParser.LT) | (1 << MiniGoParser.GT) | (1 << MiniGoParser.LEQ) | (1 << MiniGoParser.GEQ))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 542
                    self.expression3(0) 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression4(self):
            return self.getTypedRuleContext(MiniGoParser.Expression4Context,0)


        def expression3(self):
            return self.getTypedRuleContext(MiniGoParser.Expression3Context,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression3

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression3" ):
                return visitor.visitExpression3(self)
            else:
                return visitor.visitChildren(self)



    def expression3(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression3Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_expression3, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.expression4(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 556
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression3Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression3)
                    self.state = 551
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 552
                    _la = self._input.LA(1)
                    if not(_la==MiniGoParser.ADD or _la==MiniGoParser.SUB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 553
                    self.expression4(0) 
                self.state = 558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression4Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression5(self):
            return self.getTypedRuleContext(MiniGoParser.Expression5Context,0)


        def expression4(self):
            return self.getTypedRuleContext(MiniGoParser.Expression4Context,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression4

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression4" ):
                return visitor.visitExpression4(self)
            else:
                return visitor.visitChildren(self)



    def expression4(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression4Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_expression4, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.expression5()
            self._ctx.stop = self._input.LT(-1)
            self.state = 567
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Expression4Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression4)
                    self.state = 562
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 563
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.MUL) | (1 << MiniGoParser.DIV) | (1 << MiniGoParser.MOD))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 564
                    self.expression5() 
                self.state = 569
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression5Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression5(self):
            return self.getTypedRuleContext(MiniGoParser.Expression5Context,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def expression6(self):
            return self.getTypedRuleContext(MiniGoParser.Expression6Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression5

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression5" ):
                return visitor.visitExpression5(self)
            else:
                return visitor.visitChildren(self)




    def expression5(self):

        localctx = MiniGoParser.Expression5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expression5)
        self._la = 0 # Token type
        try:
            self.state = 573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.SUB, MiniGoParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                _la = self._input.LA(1)
                if not(_la==MiniGoParser.SUB or _la==MiniGoParser.NOT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 571
                self.expression5()
                pass
            elif token in [MiniGoParser.TRUE, MiniGoParser.FALSE, MiniGoParser.LP, MiniGoParser.SLP, MiniGoParser.ID, MiniGoParser.INT_LIT, MiniGoParser.FLOAT_LIT, MiniGoParser.BIN, MiniGoParser.OCT, MiniGoParser.HEX, MiniGoParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.expression6(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression6Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression7(self):
            return self.getTypedRuleContext(MiniGoParser.Expression7Context,0)


        def expression6(self):
            return self.getTypedRuleContext(MiniGoParser.Expression6Context,0)


        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def index_operators_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operators_recurContext,0)


        def SLP(self):
            return self.getToken(MiniGoParser.SLP, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SRP(self):
            return self.getToken(MiniGoParser.SRP, 0)

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_expression6

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression6" ):
                return visitor.visitExpression6(self)
            else:
                return visitor.visitChildren(self)



    def expression6(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Expression6Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_expression6, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.expression7()
            self._ctx.stop = self._input.LT(-1)
            self.state = 598
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 596
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Expression6Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression6)
                        self.state = 578
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 584
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MiniGoParser.LP:
                            self.state = 579
                            self.match(MiniGoParser.LP)
                            self.state = 581
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.TRUE) | (1 << MiniGoParser.FALSE) | (1 << MiniGoParser.SUB) | (1 << MiniGoParser.NOT) | (1 << MiniGoParser.LP) | (1 << MiniGoParser.SLP) | (1 << MiniGoParser.ID) | (1 << MiniGoParser.INT_LIT) | (1 << MiniGoParser.FLOAT_LIT) | (1 << MiniGoParser.BIN) | (1 << MiniGoParser.OCT) | (1 << MiniGoParser.HEX) | (1 << MiniGoParser.STRING_LIT))) != 0):
                                self.state = 580
                                self.index_operators_recur()


                            self.state = 583
                            self.match(MiniGoParser.RP)


                        self.state = 586
                        self.dimensions()
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Expression6Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression6)
                        self.state = 587
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 588
                        self.dimensions()
                        self.state = 589
                        self.match(MiniGoParser.SLP)
                        self.state = 590
                        self.expression(0)
                        self.state = 591
                        self.match(MiniGoParser.SRP)
                        pass

                    elif la_ == 3:
                        localctx = MiniGoParser.Expression6Context(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression6)
                        self.state = 593
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 594
                        self.match(MiniGoParser.DOT)
                        self.state = 595
                        self.expression7()
                        pass

             
                self.state = 600
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Expression7Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expression7

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression7" ):
                return visitor.visitExpression7(self)
            else:
                return visitor.visitChildren(self)




    def expression7(self):

        localctx = MiniGoParser.Expression7Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_expression7)
        try:
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 603
                self.match(MiniGoParser.LP)
                self.state = 604
                self.expression(0)
                self.state = 605
                self.match(MiniGoParser.RP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 607
                self.call_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def type_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Type_literalContext,0)


        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def array_elements(self):
            return self.getTypedRuleContext(MiniGoParser.Array_elementsContext,0)


        def array_element_set(self):
            return self.getTypedRuleContext(MiniGoParser.Array_element_setContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_literal" ):
                return visitor.visitArray_literal(self)
            else:
                return visitor.visitChildren(self)




    def array_literal(self):

        localctx = MiniGoParser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.dimensions()
            self.state = 611
            self.type_literal()
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 612
                self.match(MiniGoParser.CLP)
                self.state = 615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MiniGoParser.TRUE, MiniGoParser.FALSE, MiniGoParser.ID, MiniGoParser.INT_LIT, MiniGoParser.FLOAT_LIT, MiniGoParser.BIN, MiniGoParser.OCT, MiniGoParser.HEX, MiniGoParser.STRING_LIT]:
                    self.state = 613
                    self.array_elements()
                    pass
                elif token in [MiniGoParser.CLP]:
                    self.state = 614
                    self.array_element_set()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 617
                self.match(MiniGoParser.CRP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_element_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def array_elements(self):
            return self.getTypedRuleContext(MiniGoParser.Array_elementsContext,0)


        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def array_element_set(self):
            return self.getTypedRuleContext(MiniGoParser.Array_element_setContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_element_set

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_element_set" ):
                return visitor.visitArray_element_set(self)
            else:
                return visitor.visitChildren(self)




    def array_element_set(self):

        localctx = MiniGoParser.Array_element_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_array_element_set)
        try:
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.match(MiniGoParser.CLP)
                self.state = 622
                self.array_elements()
                self.state = 623
                self.match(MiniGoParser.CRP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.match(MiniGoParser.CLP)
                self.state = 626
                self.array_elements()
                self.state = 627
                self.match(MiniGoParser.CRP)
                self.state = 628
                self.match(MiniGoParser.COMMA)
                self.state = 629
                self.array_element_set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_declareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def type_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Type_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal_declare

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_literal_declare" ):
                return visitor.visitArray_literal_declare(self)
            else:
                return visitor.visitChildren(self)




    def array_literal_declare(self):

        localctx = MiniGoParser.Array_literal_declareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_array_literal_declare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.dimensions()
            self.state = 634
            self.type_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valid_element(self):
            return self.getTypedRuleContext(MiniGoParser.Valid_elementContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def array_elements(self):
            return self.getTypedRuleContext(MiniGoParser.Array_elementsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_elements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_elements" ):
                return visitor.visitArray_elements(self)
            else:
                return visitor.visitChildren(self)




    def array_elements(self):

        localctx = MiniGoParser.Array_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_array_elements)
        try:
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.valid_element()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.valid_element()
                self.state = 638
                self.match(MiniGoParser.COMMA)
                self.state = 639
                self.array_elements()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valid_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def BIN(self):
            return self.getToken(MiniGoParser.BIN, 0)

        def OCT(self):
            return self.getToken(MiniGoParser.OCT, 0)

        def HEX(self):
            return self.getToken(MiniGoParser.HEX, 0)

        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_valid_element

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValid_element" ):
                return visitor.visitValid_element(self)
            else:
                return visitor.visitChildren(self)




    def valid_element(self):

        localctx = MiniGoParser.Valid_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_valid_element)
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.INT_LIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.match(MiniGoParser.INT_LIT)
                pass
            elif token in [MiniGoParser.BIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 644
                self.match(MiniGoParser.BIN)
                pass
            elif token in [MiniGoParser.OCT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 645
                self.match(MiniGoParser.OCT)
                pass
            elif token in [MiniGoParser.HEX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 646
                self.match(MiniGoParser.HEX)
                pass
            elif token in [MiniGoParser.FLOAT_LIT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 647
                self.match(MiniGoParser.FLOAT_LIT)
                pass
            elif token in [MiniGoParser.STRING_LIT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 648
                self.match(MiniGoParser.STRING_LIT)
                pass
            elif token in [MiniGoParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 649
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [MiniGoParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 650
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [MiniGoParser.ID]:
                self.enterOuterAlt(localctx, 9)
                self.state = 651
                self.struct_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimensionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SLP)
            else:
                return self.getToken(MiniGoParser.SLP, i)

        def INT_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.INT_LIT)
            else:
                return self.getToken(MiniGoParser.INT_LIT, i)

        def SRP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SRP)
            else:
                return self.getToken(MiniGoParser.SRP, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_dimensions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensions" ):
                return visitor.visitDimensions(self)
            else:
                return visitor.visitChildren(self)




    def dimensions(self):

        localctx = MiniGoParser.DimensionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dimensions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(MiniGoParser.SLP)
            self.state = 655
            self.match(MiniGoParser.INT_LIT)
            self.state = 656
            self.match(MiniGoParser.SRP)
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 657
                self.match(MiniGoParser.SLP)
                self.state = 658
                self.match(MiniGoParser.INT_LIT)
                self.state = 659
                self.match(MiniGoParser.SRP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(MiniGoParser.INTEGER, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_type_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_literal" ):
                return visitor.visitType_literal(self)
            else:
                return visitor.visitChildren(self)




    def type_literal(self):

        localctx = MiniGoParser.Type_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_type_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.STRING) | (1 << MiniGoParser.INTEGER) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN) | (1 << MiniGoParser.ID))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_literal_except_structContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(MiniGoParser.INTEGER, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_type_literal_except_struct

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_literal_except_struct" ):
                return visitor.visitType_literal_except_struct(self)
            else:
                return visitor.visitChildren(self)




    def type_literal_except_struct(self):

        localctx = MiniGoParser.Type_literal_except_structContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_type_literal_except_struct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.STRING) | (1 << MiniGoParser.INTEGER) | (1 << MiniGoParser.FLOAT) | (1 << MiniGoParser.BOOLEAN))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def struct_literal_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_recurContext,0)


        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_literal" ):
                return visitor.visitStruct_literal(self)
            else:
                return visitor.visitChildren(self)




    def struct_literal(self):

        localctx = MiniGoParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_struct_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(MiniGoParser.ID)
            self.state = 667
            self.match(MiniGoParser.CLP)
            self.state = 668
            self.struct_literal_recur()
            self.state = 669
            self.match(MiniGoParser.CRP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal_recurContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def struct_literal_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_recurContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal_recur

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_literal_recur" ):
                return visitor.visitStruct_literal_recur(self)
            else:
                return visitor.visitChildren(self)




    def struct_literal_recur(self):

        localctx = MiniGoParser.Struct_literal_recurContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_struct_literal_recur)
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.match(MiniGoParser.ID)
                self.state = 672
                self.match(MiniGoParser.COLON)
                self.state = 673
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(MiniGoParser.ID)
                self.state = 675
                self.match(MiniGoParser.COLON)
                self.state = 676
                self.expression(0)
                self.state = 677
                self.match(MiniGoParser.COMMA)
                self.state = 678
                self.struct_literal_recur()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_operatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_operators_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operators_recurContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_index_operators

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_operators" ):
                return visitor.visitIndex_operators(self)
            else:
                return visitor.visitChildren(self)




    def index_operators(self):

        localctx = MiniGoParser.Index_operatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_index_operators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.index_operators_recur()
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 683
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_operators_recurContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def index_operators_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operators_recurContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_index_operators_recur

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_operators_recur" ):
                return visitor.visitIndex_operators_recur(self)
            else:
                return visitor.visitChildren(self)




    def index_operators_recur(self):

        localctx = MiniGoParser.Index_operators_recurContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_index_operators_recur)
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.expression(0)
                self.state = 688
                self.match(MiniGoParser.COMMA)
                self.state = 689
                self.index_operators_recur()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_list_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Argument_list_recurContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_argument_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_list" ):
                return visitor.visitArgument_list(self)
            else:
                return visitor.visitChildren(self)




    def argument_list(self):

        localctx = MiniGoParser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.argument_list_recur()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 694
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Argument_list_recurContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def index_operators_recur(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operators_recurContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_argument_list_recur

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_list_recur" ):
                return visitor.visitArgument_list_recur(self)
            else:
                return visitor.visitChildren(self)




    def argument_list_recur(self):

        localctx = MiniGoParser.Argument_list_recurContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_argument_list_recur)
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.expression(0)
                self.state = 699
                self.ignore()
                self.state = 700
                self.index_operators_recur()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_argument_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMICOLON)
            else:
                return self.getToken(MiniGoParser.SEMICOLON, i)

        def assign_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Assign_statementContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,i)


        def variables_declared_for(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declared_forContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def ASSIGN_VAR(self):
            return self.getToken(MiniGoParser.ASSIGN_VAR, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_for_argument_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_argument_list" ):
                return visitor.visitFor_argument_list(self)
            else:
                return visitor.visitChildren(self)




    def for_argument_list(self):

        localctx = MiniGoParser.For_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_for_argument_list)
        self._la = 0 # Token type
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MiniGoParser.VARIABLE]:
                    self.state = 705
                    self.variables_declared_for()
                    pass
                elif token in [MiniGoParser.ID]:
                    self.state = 706
                    self.assign_statement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 709
                self.match(MiniGoParser.SEMICOLON)
                self.state = 710
                self.expression(0)
                self.state = 711
                self.match(MiniGoParser.SEMICOLON)
                self.state = 712
                self.assign_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 714
                self.match(MiniGoParser.ID)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.COMMA:
                    self.state = 715
                    self.match(MiniGoParser.COMMA)
                    self.state = 716
                    self.match(MiniGoParser.ID)


                self.state = 719
                self.match(MiniGoParser.ASSIGN_VAR)
                self.state = 720
                self.match(MiniGoParser.RANGE)
                self.state = 721
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variables_declared_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(MiniGoParser.VARIABLE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def type_key_variable(self):
            return self.getTypedRuleContext(MiniGoParser.Type_key_variableContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_variables_declared_for

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariables_declared_for" ):
                return visitor.visitVariables_declared_for(self)
            else:
                return visitor.visitChildren(self)




    def variables_declared_for(self):

        localctx = MiniGoParser.Variables_declared_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_variables_declared_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(MiniGoParser.VARIABLE)
            self.state = 725
            self.match(MiniGoParser.ID)
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.STRING, MiniGoParser.INTEGER, MiniGoParser.FLOAT, MiniGoParser.BOOLEAN]:
                self.state = 726
                self.type_key_variable()
                pass
            elif token in [MiniGoParser.SLP]:
                self.state = 727
                self.array_literal()
                pass
            elif token in [MiniGoParser.ASSIGN]:
                pass
            else:
                pass
            self.state = 730
            self.match(MiniGoParser.ASSIGN)
            self.state = 731
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_statement_recur(self):
            return self.getTypedRuleContext(MiniGoParser.List_statement_recurContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_statement" ):
                return visitor.visitList_statement(self)
            else:
                return visitor.visitChildren(self)




    def list_statement(self):

        localctx = MiniGoParser.List_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_list_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.list_statement_recur()
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 734
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statement_recurContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(MiniGoParser.StatementContext,0)


        def list_statement_recur(self):
            return self.getTypedRuleContext(MiniGoParser.List_statement_recurContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement_recur

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_statement_recur" ):
                return visitor.visitList_statement_recur(self)
            else:
                return visitor.visitChildren(self)




    def list_statement_recur(self):

        localctx = MiniGoParser.List_statement_recurContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_list_statement_recur)
        self._la = 0 # Token type
        try:
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.statement()
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                    self.state = 739
                    self.ignore()


                self.state = 742
                self.list_statement_recur()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statementContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = MiniGoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 746
                self.declared_statement()
                pass

            elif la_ == 2:
                self.state = 747
                self.assign_statement()
                pass

            elif la_ == 3:
                self.state = 748
                self.if_statement()
                pass

            elif la_ == 4:
                self.state = 749
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 750
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 751
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 752
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 753
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statement_in_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_statement_in_function_recur(self):
            return self.getTypedRuleContext(MiniGoParser.List_statement_in_function_recurContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement_in_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_statement_in_function" ):
                return visitor.visitList_statement_in_function(self)
            else:
                return visitor.visitChildren(self)




    def list_statement_in_function(self):

        localctx = MiniGoParser.List_statement_in_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_list_statement_in_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.list_statement_in_function_recur()
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 757
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_statement_in_function_recurContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_in_function(self):
            return self.getTypedRuleContext(MiniGoParser.Statement_in_functionContext,0)


        def list_statement_in_function_recur(self):
            return self.getTypedRuleContext(MiniGoParser.List_statement_in_function_recurContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_list_statement_in_function_recur

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_statement_in_function_recur" ):
                return visitor.visitList_statement_in_function_recur(self)
            else:
                return visitor.visitChildren(self)




    def list_statement_in_function_recur(self):

        localctx = MiniGoParser.List_statement_in_function_recurContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_list_statement_in_function_recur)
        self._la = 0 # Token type
        try:
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.statement_in_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.statement_in_function()
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                    self.state = 762
                    self.ignore()


                self.state = 765
                self.list_statement_in_function_recur()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_in_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_statement_no_ignore(self):
            return self.getTypedRuleContext(MiniGoParser.Declared_statement_no_ignoreContext,0)


        def assign_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Assign_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(MiniGoParser.If_statementContext,0)


        def for_statement(self):
            return self.getTypedRuleContext(MiniGoParser.For_statementContext,0)


        def break_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Break_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_statementContext,0)


        def call_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Call_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Return_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_statement_in_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_in_function" ):
                return visitor.visitStatement_in_function(self)
            else:
                return visitor.visitChildren(self)




    def statement_in_function(self):

        localctx = MiniGoParser.Statement_in_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_statement_in_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 769
                self.declared_statement_no_ignore()
                pass

            elif la_ == 2:
                self.state = 770
                self.assign_statement()
                pass

            elif la_ == 3:
                self.state = 771
                self.if_statement()
                pass

            elif la_ == 4:
                self.state = 772
                self.for_statement()
                pass

            elif la_ == 5:
                self.state = 773
                self.break_statement()
                pass

            elif la_ == 6:
                self.state = 774
                self.continue_statement()
                pass

            elif la_ == 7:
                self.state = 775
                self.call_statement()
                pass

            elif la_ == 8:
                self.state = 776
                self.return_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variables_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Variables_declaredContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared_statement" ):
                return visitor.visitDeclared_statement(self)
            else:
                return visitor.visitChildren(self)




    def declared_statement(self):

        localctx = MiniGoParser.Declared_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_declared_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.variables_declared()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declared_statement_no_ignoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def constants_declared_in_function(self):
            return self.getTypedRuleContext(MiniGoParser.Constants_declared_in_functionContext,0)


        def inferred_var(self):
            return self.getTypedRuleContext(MiniGoParser.Inferred_varContext,0)


        def keyword_type_var(self):
            return self.getTypedRuleContext(MiniGoParser.Keyword_type_varContext,0)


        def struct_variable_declared(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_variable_declaredContext,0)


        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_declared_statement_no_ignore

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared_statement_no_ignore" ):
                return visitor.visitDeclared_statement_no_ignore(self)
            else:
                return visitor.visitChildren(self)




    def declared_statement_no_ignore(self):

        localctx = MiniGoParser.Declared_statement_no_ignoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_declared_statement_no_ignore)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 781
                self.constants_declared_in_function()
                pass

            elif la_ == 2:
                self.state = 782
                self.inferred_var()
                pass

            elif la_ == 3:
                self.state = 783
                self.keyword_type_var()
                pass

            elif la_ == 4:
                self.state = 784
                self.struct_variable_declared()
                pass


            self.state = 787
            _la = self._input.LA(1)
            if not(_la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 788
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constants_declared_in_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTANT(self):
            return self.getToken(MiniGoParser.CONSTANT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_constants_declared_in_function

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstants_declared_in_function" ):
                return visitor.visitConstants_declared_in_function(self)
            else:
                return visitor.visitChildren(self)




    def constants_declared_in_function(self):

        localctx = MiniGoParser.Constants_declared_in_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_constants_declared_in_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(MiniGoParser.CONSTANT)
            self.state = 792
            self.match(MiniGoParser.ID)
            self.state = 793
            self.match(MiniGoParser.ASSIGN)
            self.state = 794
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MiniGoParser.ExpressionContext,0)


        def ASSIGN_VAR(self):
            return self.getToken(MiniGoParser.ASSIGN_VAR, 0)

        def ASSIGN_ADD(self):
            return self.getToken(MiniGoParser.ASSIGN_ADD, 0)

        def ASSIGN_SUB(self):
            return self.getToken(MiniGoParser.ASSIGN_SUB, 0)

        def ASSIGN_MUL(self):
            return self.getToken(MiniGoParser.ASSIGN_MUL, 0)

        def ASSIGN_DIV(self):
            return self.getToken(MiniGoParser.ASSIGN_DIV, 0)

        def ASSIGN_MOD(self):
            return self.getToken(MiniGoParser.ASSIGN_MOD, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def SLP(self):
            return self.getToken(MiniGoParser.SLP, 0)

        def index_operators(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorsContext,0)


        def SRP(self):
            return self.getToken(MiniGoParser.SRP, 0)

        def dimensions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.DimensionsContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.DimensionsContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.DOT)
            else:
                return self.getToken(MiniGoParser.DOT, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assign_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_statement" ):
                return visitor.visitAssign_statement(self)
            else:
                return visitor.visitChildren(self)




    def assign_statement(self):

        localctx = MiniGoParser.Assign_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_assign_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 796
                self.match(MiniGoParser.ID)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MiniGoParser.SLP:
                    self.state = 797
                    self.dimensions()


                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MiniGoParser.DOT:
                    self.state = 800
                    self.match(MiniGoParser.DOT)
                    self.state = 801
                    self.match(MiniGoParser.ID)
                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MiniGoParser.SLP:
                        self.state = 802
                        self.dimensions()


                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 810
                self.match(MiniGoParser.ID)

                self.state = 811
                self.match(MiniGoParser.SLP)
                self.state = 812
                self.index_operators()
                self.state = 813
                self.match(MiniGoParser.SRP)
                pass


            self.state = 817
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.ASSIGN_VAR) | (1 << MiniGoParser.ASSIGN_ADD) | (1 << MiniGoParser.ASSIGN_SUB) | (1 << MiniGoParser.ASSIGN_MUL) | (1 << MiniGoParser.ASSIGN_DIV) | (1 << MiniGoParser.ASSIGN_MOD))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 818
            self.expression(0)
            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 819
                self.ignore()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def argument_list(self):
            return self.getTypedRuleContext(MiniGoParser.Argument_listContext,0)


        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def elif_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.Elif_statementContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.Elif_statementContext,i)


        def else_statement(self):
            return self.getTypedRuleContext(MiniGoParser.Else_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)




    def if_statement(self):

        localctx = MiniGoParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(MiniGoParser.IF)

            self.state = 823
            self.match(MiniGoParser.LP)
            self.state = 824
            self.argument_list()
            self.state = 825
            self.match(MiniGoParser.RP)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 827
                self.ignore()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self.match(MiniGoParser.CLP)
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 834
                    self.ignore() 
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.VARIABLE) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 840
                self.list_statement()


            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 843
                self.ignore()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 849
            self.match(MiniGoParser.CRP)
            self.state = 853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 850
                    self.ignore() 
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 856
                    self.elif_statement() 
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

            self.state = 865
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 862
                    self.ignore() 
                self.state = 867
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MiniGoParser.ELSE:
                self.state = 868
                self.else_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def argument_list(self):
            return self.getTypedRuleContext(MiniGoParser.Argument_listContext,0)


        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_elif_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_statement" ):
                return visitor.visitElif_statement(self)
            else:
                return visitor.visitChildren(self)




    def elif_statement(self):

        localctx = MiniGoParser.Elif_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_elif_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(MiniGoParser.ELSE)
            self.state = 872
            self.match(MiniGoParser.IF)

            self.state = 873
            self.match(MiniGoParser.LP)
            self.state = 874
            self.argument_list()
            self.state = 875
            self.match(MiniGoParser.RP)
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 877
                self.ignore()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 883
            self.match(MiniGoParser.CLP)
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 884
                    self.ignore() 
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.VARIABLE) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 890
                self.list_statement()


            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 893
                self.ignore()
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 899
            self.match(MiniGoParser.CRP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_else_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_statement" ):
                return visitor.visitElse_statement(self)
            else:
                return visitor.visitChildren(self)




    def else_statement(self):

        localctx = MiniGoParser.Else_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_else_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(MiniGoParser.ELSE)
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 902
                self.ignore()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 908
            self.match(MiniGoParser.CLP)
            self.state = 912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 909
                    self.ignore() 
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.VARIABLE) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 915
                self.list_statement()


            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 918
                self.ignore()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 924
            self.match(MiniGoParser.CRP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def for_argument_list(self):
            return self.getTypedRuleContext(MiniGoParser.For_argument_listContext,0)


        def CLP(self):
            return self.getToken(MiniGoParser.CLP, 0)

        def CRP(self):
            return self.getToken(MiniGoParser.CRP, 0)

        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def list_statement(self):
            return self.getTypedRuleContext(MiniGoParser.List_statementContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_statement" ):
                return visitor.visitFor_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_statement(self):

        localctx = MiniGoParser.For_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(MiniGoParser.FOR)
            self.state = 927
            self.for_argument_list()
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 928
                self.ignore()
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 934
            self.match(MiniGoParser.CLP)
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MiniGoParser.SEMICOLON or _la==MiniGoParser.NEWLINE:
                self.state = 935
                self.ignore()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.IF) | (1 << MiniGoParser.FOR) | (1 << MiniGoParser.RETURN) | (1 << MiniGoParser.VARIABLE) | (1 << MiniGoParser.CONTINUE) | (1 << MiniGoParser.BREAK) | (1 << MiniGoParser.ID))) != 0):
                self.state = 941
                self.list_statement()


            self.state = 944
            self.match(MiniGoParser.CRP)
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 945
                    self.ignore() 
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_break_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)




    def break_statement(self):

        localctx = MiniGoParser.Break_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_break_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(MiniGoParser.BREAK)
            self.state = 952
            self.ignore()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)




    def continue_statement(self):

        localctx = MiniGoParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_continue_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(MiniGoParser.CONTINUE)
            self.state = 955
            self.ignore()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMICOLON)
            else:
                return self.getToken(MiniGoParser.SEMICOLON, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def ignore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.IgnoreContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.IgnoreContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_call_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_statement" ):
                return visitor.visitCall_statement(self)
            else:
                return visitor.visitChildren(self)




    def call_statement(self):

        localctx = MiniGoParser.Call_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_call_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 957
                self.match(MiniGoParser.ID)
                self.state = 958
                self.match(MiniGoParser.DOT)

            elif la_ == 2:
                self.state = 959
                self.match(MiniGoParser.ID)
                self.state = 960
                self.dimensions()
                self.state = 961
                self.match(MiniGoParser.DOT)


            self.state = 965
            self.function_call()
            self.state = 971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 969
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                    if la_ == 1:
                        self.state = 966
                        self.match(MiniGoParser.SEMICOLON)
                        pass

                    elif la_ == 2:
                        self.state = 967
                        self.match(MiniGoParser.NEWLINE)
                        pass

                    elif la_ == 3:
                        self.state = 968
                        self.ignore()
                        pass

             
                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def index_operators(self):
            return self.getTypedRuleContext(MiniGoParser.Index_operatorsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function_call

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = MiniGoParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(MiniGoParser.ID)
            self.state = 975
            self.match(MiniGoParser.LP)
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.TRUE) | (1 << MiniGoParser.FALSE) | (1 << MiniGoParser.SUB) | (1 << MiniGoParser.NOT) | (1 << MiniGoParser.LP) | (1 << MiniGoParser.SLP) | (1 << MiniGoParser.ID) | (1 << MiniGoParser.INT_LIT) | (1 << MiniGoParser.FLOAT_LIT) | (1 << MiniGoParser.BIN) | (1 << MiniGoParser.OCT) | (1 << MiniGoParser.HEX) | (1 << MiniGoParser.STRING_LIT))) != 0):
                self.state = 976
                self.index_operators()


            self.state = 979
            self.match(MiniGoParser.RP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def ignore(self):
            return self.getTypedRuleContext(MiniGoParser.IgnoreContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def literal(self):
            return self.getTypedRuleContext(MiniGoParser.LiteralContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.ExpressionContext,i)


        def LP(self):
            return self.getToken(MiniGoParser.LP, 0)

        def RP(self):
            return self.getToken(MiniGoParser.RP, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.DOT)
            else:
                return self.getToken(MiniGoParser.DOT, i)

        def SLP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SLP)
            else:
                return self.getToken(MiniGoParser.SLP, i)

        def SRP(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SRP)
            else:
                return self.getToken(MiniGoParser.SRP, i)

        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def LEQ(self):
            return self.getToken(MiniGoParser.LEQ, 0)

        def GEQ(self):
            return self.getToken(MiniGoParser.GEQ, 0)

        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_return_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)




    def return_statement(self):

        localctx = MiniGoParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.state = 1021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.match(MiniGoParser.RETURN)
                self.state = 982
                self.ignore()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 983
                self.match(MiniGoParser.RETURN)
                self.state = 1016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 984
                    self.match(MiniGoParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 985
                    self.literal()
                    pass

                elif la_ == 3:
                    self.state = 986
                    self.expression(0)
                    self.state = 987
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MiniGoParser.ADD) | (1 << MiniGoParser.SUB) | (1 << MiniGoParser.MUL) | (1 << MiniGoParser.DIV) | (1 << MiniGoParser.MOD) | (1 << MiniGoParser.EQ) | (1 << MiniGoParser.NEQ) | (1 << MiniGoParser.LT) | (1 << MiniGoParser.GT) | (1 << MiniGoParser.LEQ) | (1 << MiniGoParser.GEQ) | (1 << MiniGoParser.AND) | (1 << MiniGoParser.OR))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 988
                    self.expression(0)
                    pass

                elif la_ == 4:
                    self.state = 990
                    self.match(MiniGoParser.ID)
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MiniGoParser.DOT:
                        self.state = 991
                        self.match(MiniGoParser.DOT)
                        self.state = 992
                        self.match(MiniGoParser.ID)
                        self.state = 997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 5:
                    self.state = 998
                    self.match(MiniGoParser.LP)
                    self.state = 999
                    self.expression(0)
                    self.state = 1000
                    self.match(MiniGoParser.RP)
                    self.state = 1001
                    self.match(MiniGoParser.DOT)
                    self.state = 1002
                    self.match(MiniGoParser.ID)
                    pass

                elif la_ == 6:
                    self.state = 1004
                    self.match(MiniGoParser.LP)
                    self.state = 1005
                    self.expression(0)
                    self.state = 1006
                    self.match(MiniGoParser.RP)
                    self.state = 1007
                    self.match(MiniGoParser.SLP)
                    self.state = 1008
                    self.expression(0)
                    self.state = 1009
                    self.match(MiniGoParser.SRP)
                    self.state = 1014
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        self.state = 1010
                        self.match(MiniGoParser.SLP)
                        self.state = 1011
                        self.expression(0)
                        self.state = 1012
                        self.match(MiniGoParser.SRP)


                    pass


                self.state = 1019
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1018
                    self.ignore()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IgnoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_ignore

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnore" ):
                return visitor.visitIgnore(self)
            else:
                return visitor.visitChildren(self)




    def ignore(self):

        localctx = MiniGoParser.IgnoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ignore)
        try:
            self.state = 1035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MiniGoParser.SEMICOLON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1023
                self.match(MiniGoParser.SEMICOLON)
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1024
                        self.match(MiniGoParser.NEWLINE) 
                    self.state = 1029
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                pass
            elif token in [MiniGoParser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1031 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1030
                        self.match(MiniGoParser.NEWLINE)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1033 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.expression_sempred
        self._predicates[25] = self.expression1_sempred
        self._predicates[26] = self.expression2_sempred
        self._predicates[27] = self.expression3_sempred
        self._predicates[28] = self.expression4_sempred
        self._predicates[30] = self.expression6_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def expression1_sempred(self, localctx:Expression1Context, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def expression2_sempred(self, localctx:Expression2Context, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def expression3_sempred(self, localctx:Expression3Context, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def expression4_sempred(self, localctx:Expression4Context, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def expression6_sempred(self, localctx:Expression6Context, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         




